{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","PathFindingVisualizer/Algorithms/BFS.js","PathFindingVisualizer/Algorithms/DFS.js","PathFindingVisualizer/Algorithms/Djikstra.js","PathFindingVisualizer/Algorithms/AStar.js","PathFindingVisualizer/Path.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","isFinish","isStart","isAnimated","row","col","isWall","onMouseDown","onMouseEnter","onMouseUp","isShortestPathNode","instantAnimation","onMouseOver","nodeWeight","extraClassName","id","className","Component","BFS","grid","startNode","endNode","endRow","endCol","queueOfVisited","visitedInOrder","push","length","currentNode","shift","currentRow","currentCol","aboveNode","belowNode","leftNode","rightNode","DFS","stack","returnVisitedStack","console","log","pop","topNode","bottomNode","findMinimumDistanceInGrid","currentMinimumDistance","currentMinDistanceCoordinate","currentDistance","constructShortestPath","StartNode","startRow","startCol","visitedStack","topNodeDistancePlusOne","bottomNodeDistancePlusOne","leftNodeDistancePlusOne","rightNodeDistancePlusOne","previousNodeCoords","AStar","countOfNodeNotVisited","minDistanceCoordinate","findMinimumFDistance","currentNodeDistance","aboveNodeDistance","toTopNodeDistance","estimatedCostToEnd","manhattanDistanceHeuristic","bottomNodeDistance","toBottomNodeDistance","leftNodeDistance","toLeftNodeDistance","rightNodeDistance","toRightNodeDistance","Math","abs","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","TIME_OUT_CONST","Path","prop","nodes","mousePressed","algorithm","movingStartNode","previousStartNode","movingEndNode","previousEndNode","currentStartNode","currentEndNode","alreadyVisualized","inAnimation","addingWeight","selectAlgorithm","bind","visualizeDFS","visualizeBFS","setAddingWeight","instantNonAnimation","setState","nodeObject","isTop","isBottom","GRID_ROW_LENGTH","isLeft","isRight","GRID_COL_LENGTH","isVisited","distance","previous","distanceSum","newGrid","slice","newNode","oldNoLongerStartNode","clearBoard","setTimeout","instantAnimationWithShortestPath","oldNoLongerEndNode","makeNewGridWithWeight","makeNewGridWithWall","visitedNode","animate","initialAnimationFinished","beforeTimeStartInterval","shortestPath","reverse","animateShortestPath","setTimeoutAgainFk","shouldSetTimeout","i","node","currentFinalNode","Dijkstra","resetAlreadyVisualized","column","visualizeDjikstra","visualizeAStar","event","target","value","message","Button","onClick","visualizeAlgorithm","clearWall","onChange","selectSpeed","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseOver","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19ab45d2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        const {isFinish,\r\n            isStart,\r\n            isAnimated,\r\n            row,\r\n            col,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isShortestPathNode,\r\n            instantAnimation,\r\n            onMouseOver,\r\n            nodeWeight,\r\n        } = this.props;\r\n        var extraClassName = isFinish ? 'node-finish':\r\n            isStart ? 'node-start':\r\n            isShortestPathNode ? 'node-shortest-path':\r\n            isAnimated ? 'node-visited':\r\n            isWall ? 'node-wall':\r\n            nodeWeight !== 1 ? 'node-weight':\r\n            '';\r\n        if (instantAnimation && !isStart && !isFinish) {\r\n            if (extraClassName === \"node-shortest-path\" || extraClassName === \"node-visited\") {\r\n                extraClassName += \"-instant-animation\"\r\n            }\r\n        }\r\n        return <div\r\n            id = {`node-${row}-${col}`}\r\n            className={`node ${extraClassName}`}\r\n            onMouseDown ={() => onMouseDown(row,col)}\r\n            onMouseEnter ={() => onMouseEnter(row,col)}\r\n            onMouseOver = {() => onMouseOver(row,col)}\r\n            onMouseUp = {() => onMouseUp(row,col)}>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n    row: 0,\r\n    col: 0,\r\n};\r\n\r\n","\r\nexport function BFS(grid, startNode, endNode) {\r\n    const {row,col} = startNode;\r\n    const endRow = endNode['row'];\r\n    const endCol = endNode['col'];\r\n    const queueOfVisited = [];\r\n    const visitedInOrder = [];\r\n    if (grid != null && startNode != null) {\r\n        queueOfVisited.push(startNode);\r\n    }\r\n    while (queueOfVisited.length > 0) {\r\n        const currentNode = queueOfVisited.shift();\r\n        const currentRow = currentNode['row'];\r\n        const currentCol = currentNode['col'];\r\n        visitedInOrder.push(currentNode);\r\n        currentNode['isVisited'] = true;\r\n        if (currentRow === endRow && currentCol === endCol) {\r\n            return visitedInOrder;\r\n        }\r\n        if (currentNode['isTop'] === false) {\r\n            const aboveNode = grid[currentRow-1][currentCol];\r\n            if (aboveNode['isVisited'] === false && !aboveNode['isWall']) {\r\n                queueOfVisited.push(aboveNode);\r\n                aboveNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isBottom'] === false) {\r\n            const belowNode = grid[currentRow+1][currentCol];\r\n            if (belowNode['isVisited'] === false && !belowNode['isWall']) {\r\n                queueOfVisited.push(belowNode);\r\n                belowNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isLeft'] === false) {\r\n            const leftNode = grid[currentRow][currentCol-1];\r\n            if (leftNode['isVisited'] === false && !leftNode['isWall']) {\r\n                queueOfVisited.push(leftNode);\r\n                leftNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isRight'] === false) {\r\n            const rightNode = grid[currentRow][currentCol+1];\r\n            if (rightNode['isVisited'] === false && !rightNode['isWall']) {\r\n                queueOfVisited.push(rightNode);\r\n                rightNode['isVisited'] = true;\r\n            }\r\n        }\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\n","export function DFS(grid, startNode, endNode) {\n    const{row,col} = startNode;\n    const endRow = endNode['row'];\n    const endCol = endNode['col'];\n    var stack =[];\n    var returnVisitedStack = [];\n    if (grid != null && startNode != null) {\n        stack.push(startNode);\n    }\n    console.log(stack);\n    while (stack.length > 0) {\n        const currentNode = stack.pop();\n        returnVisitedStack.push(currentNode);\n        if (currentNode['isVisited'] === false) {\n            currentNode['isVisited'] = true;\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            if (currentRow === endRow && currentCol === endCol) {\n                return returnVisitedStack;\n            } else {\n                if (currentNode['isTop'] === false) {\n                    const topNode = grid[currentRow - 1][currentCol];\n                    if (topNode['isVisited'] === false && !topNode['isWall']) {\n                        stack.push(topNode);\n                    }\n                }\n                if (currentNode['isBottom'] === false) {\n                    const bottomNode = grid[currentRow + 1][currentCol];\n                    if (bottomNode['isVisited'] === false && !bottomNode['isWall']) {\n                        stack.push(bottomNode);\n                    }\n                }\n                if (currentNode['isLeft'] === false) {\n                    const leftNode = grid[currentRow][currentCol - 1];\n                    if (leftNode['isVisited'] === false && !leftNode['isWall']) {\n                        stack.push(leftNode);\n                    }\n                }\n                if (currentNode['isRight'] === false) {\n                    const rightNode = grid[currentRow][currentCol + 1];\n                    if (rightNode['isVisited'] === false && !rightNode['isWall']) {\n                        stack.push(rightNode);\n                    }\n                }\n            }\n        }\n    }\n    return returnVisitedStack;\n}","// export function Dijkstra(grid, startNode, endNode) {\n//     const {row,col} = startNode;\n//     const endRow = endNode['row'];\n//     const endCol = endNode['col'];\n//     const queueOfVisited = [];\n//     // console.log(grid);\n//     const visitedInOrder = [];\n//     if (grid != null && startNode != null) {\n//         queueOfVisited.push(startNode);\n//     }\n//     while (queueOfVisited.length > 0) {\n//         findMinimumDistanceInGrid(grid);\n//         const currentNode = queueOfVisited.shift();\n//         visitedInOrder.push(currentNode);\n//         // if (currentNode['col'] === 4) {\n//         //     if(currentNode['row'] === 2) {\n//         //         console.log('2,4');\n//         //     }\n//         //     if (currentNode['row'] === 3) {\n//         //         console.log('3,4');\n//         //     }\n//         // }\n//         if (!currentNode['isVisited']) {\n//             const currentRow = currentNode['row'];\n//             const currentCol = currentNode['col'];\n//             const currentDistance = currentNode['distance'];\n//             // var nextDistance = currentDistance + currentNode['nodeWeight'];\n//             if (currentNode['isTop'] === false) {\n//                 const aboveNode = grid[currentRow - 1][currentCol];\n//                 if (!aboveNode['isWall']) {\n//                     if (aboveNode['isVisited'] === false) {\n//                         queueOfVisited.push(aboveNode);\n//                     }\n//                     const aboveNodeDistance = aboveNode['distance'];\n//                     const nextDistance = currentDistance + aboveNode['nodeWeight'];\n//                     if (currentNode['row'] === 3 && currentNode['col'] === 4) {\n//                         console.log(\"Above node weight is \" + aboveNode['nodeWeight']);\n//                         console.log(\"From current to above node is \" + nextDistance);\n//                         console.log(\"Top node current distance is \" + aboveNodeDistance);\n//                         console.log(\"Current distance is \" + currentDistance);\n//                     }\n//                     if ( nextDistance < aboveNodeDistance) {\n//                         aboveNode['distance'] = nextDistance;\n//                         aboveNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             if (currentNode['isBottom'] === false) {\n//                 const belowNode = grid[currentRow + 1][currentCol];\n//                 if (!belowNode['isWall']) {\n//                     if (belowNode['isVisited'] === false) {\n//                         queueOfVisited.push(belowNode);\n//                     }\n//                     const belowNodeDistance = belowNode['distance'];\n//                     const nextDistance = currentDistance + belowNode['nodeWeight'];\n//                     if (nextDistance < belowNodeDistance) {\n//                         belowNode['distance'] = nextDistance;\n//                         belowNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             if (currentNode['isLeft'] === false) {\n//                 const leftNode = grid[currentRow][currentCol - 1];\n//                 if (!leftNode['isWall']) {\n//                     if (leftNode['isVisited'] === false) {\n//                         queueOfVisited.push(leftNode);\n//                     }\n//                     const leftNodeDistance = leftNode['distance'];\n//                     const nextDistance = currentDistance + leftNode['nodeWeight'];\n//                     if (nextDistance < leftNodeDistance) {\n//                         leftNode['distance'] = nextDistance;\n//                         leftNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             if (currentNode['isRight'] === false) {\n//                 const rightNode = grid[currentRow][currentCol + 1];\n//                 if (!rightNode['isWall']) {\n//                     if (rightNode['isVisited'] === false) {\n//                         queueOfVisited.push(rightNode);\n//                     }\n//                     const rightNodeDistance = rightNode['distance'];\n//                     const nextDistance = currentDistance + rightNode['nodeWeight'];\n//                     if (nextDistance < rightNodeDistance) {\n//                         rightNode['distance'] = nextDistance;\n//                         rightNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             currentNode['isVisited'] = true;\n//         }\n//     }\n//     return visitedInOrder;\n// }\n\nexport function Dijkstra(grid, startNode, endNode) {\n    const {row,col} = startNode;\n    const endRow = endNode['row'];\n    const endCol = endNode['col'];\n    var countOfNodeNotVisited = grid.length * grid[0].length;\n    const queueOfVisited = [];\n    const visitedInOrder = [];\n    if (grid != null && startNode != null) {\n        queueOfVisited.push(startNode);\n    }\n    while (countOfNodeNotVisited > 0) {\n        const minDistanceCoordinate = findMinimumDistanceInGrid(grid);\n        if (minDistanceCoordinate.length > 0) {\n            const currentNode = grid[minDistanceCoordinate[0]][minDistanceCoordinate[1]];\n            const currentNodeDistance = currentNode['distance'];\n            const currentRow = minDistanceCoordinate[0];\n            const currentCol = minDistanceCoordinate[1];\n            if (!currentNode['isWall']) {\n                if (!currentNode['isTop']) {\n                    const aboveNode = grid[currentRow - 1][currentCol];\n                    if (!aboveNode['isWall']) {\n                        const aboveNodeDistance = aboveNode['distance'];\n                        const aboveNodeWeight = aboveNode['nodeWeight'];\n                        const toTopNodeDistance = currentNodeDistance + aboveNodeWeight;\n                        if (toTopNodeDistance < aboveNodeDistance) {\n                            aboveNode['distance'] = toTopNodeDistance;\n                            aboveNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                if (!currentNode['isBottom']) {\n                    const bottomNode = grid[currentRow + 1][currentCol];\n                    if (!bottomNode['isWall']) {\n                        const bottomNodeDistance = bottomNode['distance'];\n                        const bottomNodeWeight = bottomNode['nodeWeight'];\n                        const toBottomNodeDistance = currentNodeDistance + bottomNodeWeight;\n                        if (toBottomNodeDistance < bottomNodeDistance) {\n                            bottomNode['distance'] = toBottomNodeDistance;\n                            bottomNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                if (!currentNode['isLeft']) {\n                    const leftNode = grid[currentRow][currentCol - 1];\n                    if (!leftNode['isWall']) {\n                        const leftNodeDistance = leftNode['distance'];\n                        const leftNodeWeight = leftNode['nodeWeight'];\n                        const toLeftNodeDistance = currentNodeDistance + leftNodeWeight;\n                        if (toLeftNodeDistance < leftNodeDistance) {\n                            leftNode['distance'] = toLeftNodeDistance;\n                            leftNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                if (!currentNode['isRight']) {\n                    const rightNode = grid[currentRow][currentCol + 1];\n                    if (!rightNode['isWall']) {\n                        const rightNodeDistance = rightNode['distance'];\n                        const rightNodeWeight = rightNode['nodeWeight'];\n                        const toRightNodeDistance = currentNodeDistance + rightNodeWeight;\n                        if (toRightNodeDistance < rightNodeDistance) {\n                            rightNode['distance'] = toRightNodeDistance;\n                            rightNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                visitedInOrder.push(currentNode);\n                currentNode['isVisited'] = true;\n            }\n        }\n        countOfNodeNotVisited -= 1;\n    }\n    console.log(\"finished the loop\");\n    console.log(grid);\n    return visitedInOrder;\n}\n\nfunction findMinimumDistanceInGrid(grid) {\n    var currentMinimumDistance = 99999999999;\n    var currentMinDistanceCoordinate = [];\n    for (let row = 0; row < grid.length; row ++) {\n        const currentRow = grid[row];\n        for (let col = 0; col < currentRow.length; col ++) {\n            const currentNode = currentRow[col];\n            if (!currentNode['isVisited'] && !currentNode['isWall']) {\n                const currentDistance = currentNode['distance'];\n                if (currentDistance < currentMinimumDistance) {\n                    currentMinimumDistance = currentDistance;\n                    currentMinDistanceCoordinate = [currentNode['row'], currentNode['col']]\n                }\n            }\n        }\n    }\n    console.log(\"current smallest distance in grid is \" + currentMinimumDistance);\n    console.log(\"The coordinate is \" + currentMinDistanceCoordinate);\n    return currentMinDistanceCoordinate;\n}\n\nexport function constructShortestPath(grid,StartNode,endNode) {\n    const startRow = StartNode['row'];\n    const startCol = StartNode['col'];\n    var currentNode = endNode;\n    var visitedStack = [];\n    const currentRow = endNode['row'];\n    const currentCol = endNode['col'];\n    if (!endNode['isTop']) {\n        const topNode = grid[currentRow - 1][currentCol];\n        const topNodeDistancePlusOne = topNode['distance'] + 1;\n        if (topNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = topNodeDistancePlusOne;\n            endNode['previous'] = [topNode['row'], topNode['col']];\n        }\n    }\n    if (!endNode['isBottom']) {\n        const bottomNode = grid[currentRow + 1][currentCol];\n        const bottomNodeDistancePlusOne = bottomNode['distance'] + 1;\n        if (bottomNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = bottomNodeDistancePlusOne;\n            endNode['previous'] = [bottomNode['row'], bottomNode['col']];\n        }\n    }\n    if (!endNode['isLeft']){\n        const leftNode = grid[currentRow][currentCol - 1];\n        const leftNodeDistancePlusOne = leftNode['distance'] + 1;\n        if (leftNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = leftNodeDistancePlusOne;\n            endNode['previous'] = [leftNode['row'], leftNode['col']];\n        }\n    }\n    if (!endNode['isRight']) {\n        const rightNode = grid[currentRow][currentCol + 1];\n        const rightNodeDistancePlusOne = rightNode['distance'] + 1;\n        if (rightNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = rightNodeDistancePlusOne;\n            endNode['previous'] = [rightNode['row'], rightNode['col']];\n        }\n    }\n    while (currentNode != null) {\n        if (currentNode['distance'] === 99999999) {\n            return \"No path exist\";\n        } else {\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            if (currentRow === startRow && currentCol === startCol) {\n                return visitedStack;\n            } else {\n                const previousNodeCoords = currentNode['previous'];\n                currentNode = grid[previousNodeCoords[0]][previousNodeCoords[1]]\n            }\n            visitedStack.push(currentNode);\n        }\n    }\n    return visitedStack;\n}","// Note to self:\r\n// Implementing AStar according to this website\r\n// https://www.geeksforgeeks.org/a-search-algorithm/\r\n// node.distance = g\r\n// h does not exist as a field but is calculated at run time.(manhattanDistanceHeuristic)\r\n// node.distanceSum = f\r\n// Their open list, I will denote as visited or unvisited as a property of the node\r\n// So open list = node.visited = false\r\n// closed list = node.visited = true\r\nexport function AStar(grid, startNode, endNode) {\r\n    const {row,col} = startNode;\r\n    const endRow = endNode['row'];\r\n    const endCol = endNode['col'];\r\n    var countOfNodeNotVisited = grid.length * grid[0].length;\r\n    const queueOfVisited = [];\r\n    const visitedInOrder = [];\r\n    if (grid != null && startNode != null) {\r\n        queueOfVisited.push(startNode);\r\n    }\r\n    while (countOfNodeNotVisited > 0) {\r\n        const minDistanceCoordinate = findMinimumFDistance(grid);\r\n        if (minDistanceCoordinate.length > 0) {\r\n            const currentNode = grid[minDistanceCoordinate[0]][minDistanceCoordinate[1]];\r\n            const currentNodeDistance = currentNode['distance'];\r\n            const currentRow = minDistanceCoordinate[0];\r\n            const currentCol = minDistanceCoordinate[1];\r\n            if (!currentNode['isWall']) {\r\n                if (!currentNode['isTop']) {\r\n                    const aboveNode = grid[currentRow - 1][currentCol];\r\n                    if (!aboveNode['isWall']) {\r\n                        const aboveNodeDistance = aboveNode['distance'];\r\n                        const aboveNodeWeight = aboveNode['nodeWeight'];\r\n                        const toTopNodeDistance = currentNodeDistance + aboveNodeWeight;\r\n                        if (toTopNodeDistance < aboveNodeDistance) {\r\n                            aboveNode['distance'] = toTopNodeDistance;\r\n                            aboveNode['previous'] = [currentRow, currentCol];\r\n                        }\r\n                        // g = toTopNodeDistance\r\n                        // h = manhattanDistanceHeuristic\r\n                        const estimatedCostToEnd = manhattanDistanceHeuristic(aboveNode, endNode)\r\n                        if (estimatedCostToEnd < aboveNode['distanceSum']) {\r\n                            aboveNode['distanceSum'] = estimatedCostToEnd;\r\n                        }\r\n                    }\r\n                }\r\n                if (!currentNode['isBottom']) {\r\n                    const bottomNode = grid[currentRow + 1][currentCol];\r\n                    if (!bottomNode['isWall']) {\r\n                        const bottomNodeDistance = bottomNode['distance'];\r\n                        const bottomNodeWeight = bottomNode['nodeWeight'];\r\n                        const toBottomNodeDistance = currentNodeDistance + bottomNodeWeight;\r\n                        if (toBottomNodeDistance < bottomNodeDistance) {\r\n                            bottomNode['distance'] = toBottomNodeDistance;\r\n                            bottomNode['previous'] = [currentRow, currentCol];\r\n                        }\r\n                        const estimatedCostToEnd = manhattanDistanceHeuristic(bottomNode, endNode)\r\n                        if (estimatedCostToEnd < bottomNode['distanceSum']) {\r\n                            bottomNode['distanceSum'] = estimatedCostToEnd;\r\n                        }\r\n                    }\r\n                }\r\n                if (!currentNode['isLeft']) {\r\n                    const leftNode = grid[currentRow][currentCol - 1];\r\n                    if (!leftNode['isWall']) {\r\n                        const leftNodeDistance = leftNode['distance'];\r\n                        const leftNodeWeight = leftNode['nodeWeight'];\r\n                        const toLeftNodeDistance = currentNodeDistance + leftNodeWeight;\r\n                        if (toLeftNodeDistance < leftNodeDistance) {\r\n                            leftNode['distance'] = toLeftNodeDistance;\r\n                            leftNode['previous'] = [currentRow, currentCol];\r\n                        }\r\n                    }\r\n                    const estimatedCostToEnd = manhattanDistanceHeuristic(leftNode, endNode)\r\n                    if (estimatedCostToEnd < leftNode['distanceSum']) {\r\n                        leftNode['distanceSum'] = estimatedCostToEnd;\r\n                    }\r\n                }\r\n                if (!currentNode['isRight']) {\r\n                    const rightNode = grid[currentRow][currentCol + 1];\r\n                    if (!rightNode['isWall']) {\r\n                        const rightNodeDistance = rightNode['distance'];\r\n                        const rightNodeWeight = rightNode['nodeWeight'];\r\n                        const toRightNodeDistance = currentNodeDistance + rightNodeWeight;\r\n                        if (toRightNodeDistance < rightNodeDistance) {\r\n                            rightNode['distance'] = toRightNodeDistance;\r\n                            rightNode['previous'] = [currentRow, currentCol];\r\n                        }\r\n                    }\r\n                    const estimatedCostToEnd = manhattanDistanceHeuristic(rightNode, endNode)\r\n                    if (estimatedCostToEnd < rightNode['distanceSum']) {\r\n                        rightNode['distanceSum'] = estimatedCostToEnd;\r\n                    }\r\n                }\r\n                visitedInOrder.push(currentNode);\r\n                currentNode['isVisited'] = true;\r\n            }\r\n        }\r\n        countOfNodeNotVisited -= 1;\r\n    }\r\n    console.log(\"finished the loop\");\r\n    console.log(grid);\r\n    return visitedInOrder;\r\n}\r\n\r\nfunction findMinimumFDistance(grid) {\r\n    var currentMinimumDistance = 99999999999;\r\n    var currentMinDistanceCoordinate = [];\r\n    for (let row =0; row < grid.length; row ++) {\r\n        const currentRow = grid[row];\r\n        for (let col = 0; col < currentRow.length; col ++) {\r\n            const currentNode = currentRow[col];\r\n            if (!currentNode['isVisited'] && !currentNode['isWall']) {\r\n                const currentDistance = currentNode['distanceSum'];\r\n                if (currentDistance < currentMinimumDistance) {\r\n                    currentMinimumDistance = currentDistance;\r\n                    currentMinDistanceCoordinate = [currentNode['row'], currentNode['col']]\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return currentMinDistanceCoordinate;\r\n}\r\n\r\nfunction manhattanDistanceHeuristic(currentNode, endNode) {\r\n    return (Math.abs(currentNode['row'] - endNode['row']) + Math.abs(currentNode['col'] - endNode['col']))\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './Path.css'\r\nimport {BFS} from './Algorithms/BFS';\r\nimport {DFS} from \"./Algorithms/DFS\";\r\nimport {constructShortestPath, Dijkstra} from \"./Algorithms/Djikstra\"\r\nimport {AStar} from \"./Algorithms/AStar\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Button} from 'react-bootstrap';\r\n\r\n\r\nconst START_NODE_ROW = 0;\r\nconst START_NODE_COL = 0;\r\nconst FINISH_NODE_ROW = 3;\r\nconst FINISH_NODE_COL = 0;\r\nconst GRID_ROW_LENGTH = 20;\r\nconst GRID_COL_LENGTH = 50;\r\nvar TIME_OUT_CONST = 25;\r\n\r\nexport default class Path extends Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.state = {\r\n            nodes: [],\r\n            mousePressed: false,\r\n            algorithm: \"BFS\",\r\n            movingStartNode: false,\r\n            previousStartNode: [START_NODE_ROW, START_NODE_COL],\r\n            movingEndNode: false,\r\n            previousEndNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n            currentStartNode: [START_NODE_ROW, START_NODE_COL],\r\n            currentEndNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n            alreadyVisualized: false,\r\n            inAnimation: false,\r\n            addingWeight: false,\r\n        };\r\n        this.selectAlgorithm = this.selectAlgorithm.bind(this);\r\n        this.visualizeDFS = this.visualizeDFS.bind(this);\r\n        this.visualizeBFS = this.visualizeBFS.bind(this);\r\n        this.setAddingWeight = this.setAddingWeight.bind(this);\r\n        this.instantNonAnimation = this.instantNonAnimation.bind(this);\r\n    }\r\n\r\n    setAddingWeight() {\r\n        this.setState({addingWeight:!this.state.addingWeight});\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {currentStartNode, currentEndNode} = this.state;\r\n        const nodes = [];\r\n        for (let row = 0; row < GRID_ROW_LENGTH; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < GRID_COL_LENGTH; col++) {\r\n                const nodeObject = {\r\n                    row,\r\n                    col,\r\n                    isStart: row === currentStartNode[0] && col === currentStartNode[1],\r\n                    isFinish: row === currentEndNode[0] && col === currentEndNode[1],\r\n                    isTop: row === 0,\r\n                    isBottom: row === GRID_ROW_LENGTH-1,\r\n                    isLeft: col === 0,\r\n                    isRight: col === GRID_COL_LENGTH-1,\r\n                    isVisited: false,\r\n                    isAnimated: false,\r\n                    isWall: false,\r\n                    distance: row === currentStartNode[0] && col === currentStartNode[1] ? 0 : 99999999,\r\n                    previous : [null,null],\r\n                    isShortestPathNode: false,\r\n                    instantAnimation: false,\r\n                    nodeWeight: 1,\r\n                    distanceSum: row === currentStartNode[0] && col === currentStartNode[1] ? 0 : 99999999,\r\n                };\r\n                currentRow.push(nodeObject)\r\n            }\r\n            nodes.push(currentRow)\r\n        }\r\n        this.setState({nodes});\r\n    }\r\n\r\n    handleMouseDown(row,col) {\r\n        const mousePressed = this.state.mousePressed;\r\n        if (this.state.nodes[row][col].isStart) {\r\n            // console.log(\"Start Node Move\");\r\n            this.setState({movingStartNode:true, previousStartNode: [row,col]});\r\n            return;\r\n        } else if (this.state.nodes[row][col].isFinish) {\r\n            // console.log(\"End Node Move\");\r\n            this.setState({movingEndNode:true, previousEndNode: [row,col]});\r\n            return;\r\n        }\r\n        this.setState({mousePressed: !mousePressed});\r\n    }\r\n\r\n    handleMouseUp(row,col) {\r\n        const {previousStartNode, previousEndNode} = this.state;\r\n        this.setState({mousePressed:false, movingStartNode:false, movingEndNode:false});\r\n    }\r\n\r\n    handleMouseOver(row,col) {\r\n        const {previousStartNode, previousEndNode} = this.state;\r\n        if (this.state.movingStartNode) {\r\n            // console.log(\"Moving start Node\");\r\n            const newGrid = this.state.nodes.slice();\r\n            const currentNode = this.state.nodes[row][col];\r\n            const newNode = {\r\n                ...currentNode,\r\n                isStart: true,\r\n                distance: 0,\r\n            };\r\n            const oldStartNode = this.state.nodes[previousStartNode[0]][previousStartNode[1]];\r\n            const oldNoLongerStartNode = {\r\n                ...oldStartNode,\r\n                isStart: false,\r\n                distance: 99999999,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n            newGrid[previousStartNode[0]][previousStartNode[1]] = oldNoLongerStartNode;\r\n            this.setState({nodes:newGrid, currentStartNode: [newNode.row,newNode.col], previousStartNode:[newNode.row, newNode.col]});\r\n            this.clearBoard();\r\n\r\n            // console.log(\"Start node instant animation\");\r\n            // console.log(\"Current algorithm is\" + this.state.algorithm + \" alreadyVisualized = \" + this.state.alreadyVisualized);\r\n            if ((this.state.algorithm === \"Djikstra\" || this.state.algorithm === \"AStar\") && this.state.alreadyVisualized) {\r\n                setTimeout(() => {\r\n                    // this.clearBoard();\r\n                    this.instantAnimationWithShortestPath();\r\n                }, 0)\r\n            } else if ((this.state.algorithm === \"DFS\" || this.state.algorithm === \"BFS\") && this.state.alreadyVisualized) {\r\n                this.instantNonAnimation();\r\n            }\r\n        } else if (this.state.movingEndNode) {\r\n            // console.log(\"Moving End Node\");\r\n            const newGrid = this.state.nodes.slice();\r\n            const currentNode = this.state.nodes[row][col];\r\n            const newNode = {\r\n                ...currentNode,\r\n                isFinish: true\r\n            };\r\n            const oldEndNode = this.state.nodes[previousEndNode[0]][previousEndNode[1]];\r\n            const oldNoLongerEndNode = {\r\n                ...oldEndNode,\r\n                isFinish: false,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n            newGrid[previousEndNode[0]][previousEndNode[1]] = oldNoLongerEndNode;\r\n            this.setState({nodes:newGrid, currentEndNode:[newNode.row, newNode.col], previousEndNode: [newNode.row, newNode.col]});\r\n            this.clearBoard();\r\n            // console.log(\"end node instant animation \");\r\n            if ((this.state.algorithm === \"Djikstra\" || this.state.algorithm === \"AStar\") && this.state.alreadyVisualized) {\r\n                setTimeout(() => {\r\n                    // this.clearBoard();\r\n                    this.instantAnimationWithShortestPath();\r\n                }, 0)\r\n            } else if ((this.state.algorithm === \"DFS\" || this.state.algorithm === \"BFS\") && this.state.alreadyVisualized) {\r\n                this.instantNonAnimation();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleMouseEnter(row,col) {\r\n        // console.log(\"MousePressed \" + this.state.mousePressed);\r\n        if (!this.state.mousePressed) return;\r\n        if (!this.state.addingWeight) {\r\n            const newGrid = this.makeNewGridWithWall(row, col);\r\n            this.setState({nodes:newGrid});\r\n        }\r\n        else {\r\n            if (this.state.algorithm === \"Djikstra\") {\r\n                const newGrid = this.makeNewGridWithWeight(row, col);\r\n                this.setState({nodes: newGrid});\r\n            }\r\n        }\r\n    }\r\n\r\n    makeNewGridWithWeight(row,col) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const currentNode = this.state.nodes[row][col];\r\n        if (!currentNode.isWall) {\r\n            const newNode = {\r\n                ...currentNode,\r\n                nodeWeight: currentNode.nodeWeight === 1 ? 10: 1\r\n            };\r\n            newGrid[row][col] = newNode;\r\n        }\r\n        return newGrid;\r\n    }\r\n\r\n    // This function is used to make 'walls' in the grid\r\n    makeNewGridWithWall(row,col) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const currentNode = this.state.nodes[row][col];\r\n        const newNode = {\r\n            ...currentNode,\r\n            isWall: !currentNode['isWall']\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    }\r\n\r\n    // Determine if there is a path from start to end via BFS\r\n    visualizeBFS() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = BFS(nodes, startNode, endNode);\r\n        this.animate(visitedNode);\r\n        setTimeout( () => {\r\n            this.setState({alreadyVisualized:true});\r\n        }, TIME_OUT_CONST * (visitedNode.length + 10)\r\n        )\r\n    }\r\n\r\n    // Determine if there is a path from start to end via DFS\r\n    visualizeDFS() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = DFS(nodes, startNode, endNode);\r\n        this.animate(visitedNode);\r\n        setTimeout( () => {\r\n            this.setState({alreadyVisualized:true});\r\n        }, TIME_OUT_CONST * (visitedNode.length + 10)\r\n        )\r\n    }\r\n\r\n    //This function will find the shortest path from start to end via Djikstra\r\n    visualizeDjikstra() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        // const visitedNode = Dijkstra(nodes,startNode,endNode);\r\n        const visitedNode = AStar(nodes, startNode, endNode);\r\n        const beforeTimeStartInterval = this.animate(visitedNode) + 35;\r\n        this.setState({inAnimation: true});\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        console.log(nodes);\r\n        this.animateShortestPath(shortestPath,beforeTimeStartInterval,true);\r\n        const setTimeoutAgainFk = shortestPath.length + beforeTimeStartInterval;\r\n        setTimeout(() => {\r\n            this.setState({alreadyVisualized: true, inAnimation:false})\r\n        }, TIME_OUT_CONST * (setTimeoutAgainFk + 10))\r\n    }\r\n\r\n    visualizeAStar() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = AStar(nodes, startNode, endNode);\r\n        const beforeTimeStartInterval = this.animate(visitedNode) + 35;\r\n        this.setState({inAnimation: true});\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        console.log(nodes);\r\n        this.animateShortestPath(shortestPath,beforeTimeStartInterval,true);\r\n        const setTimeoutAgainFk = shortestPath.length + beforeTimeStartInterval;\r\n        setTimeout(() => {\r\n            this.setState({alreadyVisualized: true, inAnimation:false})\r\n        }, TIME_OUT_CONST * (setTimeoutAgainFk + 10))\r\n    }\r\n\r\n    // visitedNode(List) = All of the nodes that makes the shortest path from start to end\r\n    // beforeTimeStartInterval(Integer) = How many nodes are visited before we found our end node\r\n    // shouldSetTimeout(Boolean) = determines if we should be using instant animation or not.\r\n    animateShortestPath(visitedNode, beforeTimeStartInterval, shouldSetTimeout) {\r\n        const newGrid = this.state.nodes.slice();\r\n        // this.setState({inAnimation:true});\r\n        // console.log(\"Setting shortest path inAnimation to true\");\r\n        if (shouldSetTimeout) {\r\n            for (let i = 0; i < visitedNode.length; i++) {\r\n                const node = visitedNode[i];\r\n                const newNode = {\r\n                    ...node,\r\n                    isShortestPathNode: true,\r\n                };\r\n                setTimeout(() => {\r\n                    newGrid[node.row][node.col] = newNode;\r\n                    this.setState({nodes: newGrid});\r\n                }, TIME_OUT_CONST * (i + beforeTimeStartInterval));\r\n            }\r\n        }\r\n    }\r\n\r\n    instantNonAnimation() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        let visitedNode;\r\n        if (this.state.algorithm === \"BFS\") {\r\n            visitedNode = BFS(nodes, startNode, endNode);\r\n        } else if (this.state.algorithm === \"DFS\") {\r\n            visitedNode = DFS(nodes, startNode, endNode);\r\n        }\r\n        const newGrid = this.state.nodes.slice();\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node['nodeWeight'] === 1) {\r\n                const newNode = {\r\n                    ...node,\r\n                    isAnimated: true,\r\n                };\r\n                newGrid[node.row][node.col] = newNode;\r\n            }\r\n        }\r\n        this.setState({nodes:newGrid});\r\n    }\r\n\r\n    animate(visitedNode) {\r\n        this.setState({inAnimation:true});\r\n        // console.log(visitedNode.length);\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node.row === currentFinalNode[0] && node.col === currentFinalNode[1]) {\r\n                setTimeout(() => {\r\n                    this.setState({inAnimation:false});\r\n                }, (i+20)*TIME_OUT_CONST);\r\n                return i;\r\n            }\r\n            if (node['nodeWeight'] === 1) {\r\n                setTimeout(() => {\r\n                        const newGrid = this.state.nodes.slice();\r\n                        const newNode = {\r\n                            ...node,\r\n                            isAnimated: true,\r\n                        };\r\n                        newGrid[node.row][node.col] = newNode;\r\n                        this.setState({nodes: newGrid})\r\n                    },\r\n                    TIME_OUT_CONST * i);\r\n            }\r\n        }\r\n    }\r\n\r\n    instantAnimationWithShortestPath() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode, algorithm} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        var visitedNode\r\n        if (algorithm === \"Djikstra\") {\r\n            visitedNode = Dijkstra(nodes, startNode, endNode);\r\n        } else if (algorithm ===\"AStar\") {\r\n            visitedNode = AStar(nodes,startNode, endNode);\r\n        }\r\n        const newGrid = this.state.nodes.slice();\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node.row === currentFinalNode[0] && node.col === currentFinalNode[1]) {\r\n                break;\r\n            }\r\n            const newNode = {\r\n                ...node,\r\n                isAnimated: true,\r\n            };\r\n            newGrid[node.row][node.col] = newNode;\r\n        }\r\n        // console.log(\"Before shortest path\");\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        for (let i = 0; i < shortestPath.length; i++) {\r\n            const node = shortestPath[i];\r\n            const newNode = {\r\n                ...node,\r\n                isShortestPathNode: true,\r\n            };\r\n            newGrid[newNode.row][newNode.col] = newNode;\r\n        };\r\n        this.setState({nodes:newGrid});\r\n    }\r\n\r\n    clearBoard(resetAlreadyVisualized) {\r\n        const {nodes,currentStartNode,currentEndNode, inAnimation} = this.state;\r\n        const newGrid = this.state.nodes.slice();\r\n        if (!inAnimation) {\r\n            for (var row = 0; row < nodes.length; row++) {\r\n                const column = nodes[row];\r\n                for (var col = 0; col < column.length; col++) {\r\n                    var currentNode = column[col];\r\n                    if (currentNode['isStart']) {\r\n                        // currentNode['isWall'] = false;\r\n                        currentNode['isAnimated'] = false;\r\n                        currentNode['isVisited'] = false;\r\n                        currentNode['isShortestPathNode'] = false;\r\n                        currentNode['distance'] = 0;\r\n                        currentNode['distanceSum'] = 0;\r\n                        newGrid[row][col] = currentNode\r\n                    } else {\r\n                        // currentNode['isWall'] = false;\r\n                        currentNode['isAnimated'] = false;\r\n                        currentNode['isVisited'] = false;\r\n                        currentNode['isShortestPathNode'] = false;\r\n                        currentNode['distance'] = 99999999;\r\n                        currentNode['distanceSum'] = 99999999;\r\n                        newGrid[row][col] = currentNode\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"After clearing board\");\r\n            // console.log(newGrid);\r\n            this.setState({nodes:newGrid});\r\n            if (resetAlreadyVisualized) {\r\n                this.setState({alreadyVisualized:false})\r\n            }\r\n        }\r\n    }\r\n\r\n    clearWall() {\r\n        const {nodes,inAnimation} = this.state;\r\n        if (!inAnimation) {\r\n            const newGrid = this.state.nodes.slice();\r\n            for (var row = 0; row < nodes.length; row++) {\r\n                const column = nodes[row];\r\n                for (var col = 0; col < column.length; col++) {\r\n                    var currentNode = column[col];\r\n                    currentNode['isWall'] = false;\r\n                    currentNode['nodeWeight'] = 1;\r\n                }\r\n            }\r\n            this.setState({nodes: newGrid})\r\n        }\r\n    }\r\n\r\n\r\n    visualizeAlgorithm() {\r\n        const {algorithm} = this.state;\r\n        this.clearBoard();\r\n        if (algorithm === \"BFS\") {\r\n            this.visualizeBFS();\r\n        } else if (algorithm === \"DFS\") {\r\n            this.visualizeDFS();\r\n        } else if (algorithm === \"Djikstra\") {\r\n            this.visualizeDjikstra()\r\n            // this.instantAnimationWithShortestPath();\r\n        } else if (algorithm === \"AStar\") {\r\n            this.visualizeAStar();\r\n        }\r\n    }\r\n\r\n    selectSpeed(event) {\r\n        if (event.target.value === \"Fast\") {\r\n            TIME_OUT_CONST = 20;\r\n        } else if (event.target.value === \"Average\") {\r\n            TIME_OUT_CONST = 50;\r\n        } else if (event.target.value === \"Slow\") {\r\n            TIME_OUT_CONST = 100;\r\n        }\r\n    }\r\n\r\n    selectAlgorithm(event) {\r\n        this.setState({algorithm: event.target.value});\r\n        this.clearBoard();\r\n    }\r\n\r\n\r\n    render() {\r\n        const {nodes, mousePressed,algorithm, alreadyVisualized, addingWeight} = this.state;\r\n        var message = \"Add weight\";\r\n        if (addingWeight) {\r\n            message = \"Stop adding weight\";\r\n        }\r\n        return (\r\n            <div className =\"outerContainer\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light centerNavbar\">\r\n                    <Button className=\"btn button\" onClick={() => this.visualizeAlgorithm()}>\r\n                        Visualize {algorithm}\r\n                    </Button>\r\n                    <Button className=\"btn button\" onClick={() => this.clearBoard(true)}>\r\n                        Clear Board\r\n                    </Button>\r\n                    <Button className=\"btn button\" onClick={() => this.clearWall()}>\r\n                        Clear Wall\r\n                    </Button>\r\n                    <Button className=\"btn button\" onClick={() => this.setAddingWeight()}>\r\n                        {message}\r\n                    </Button>\r\n                    <Button>\r\n                        <div className =\"dropdown\">\r\n                            <select className =\"AlgorithmSelect\" onChange={this.selectAlgorithm}>\r\n                                <option value=\"BFS\"> BFS</option>\r\n                                <option value=\"DFS\"> DFS</option>\r\n                                <option value=\"Djikstra\"> Djikstra </option>\r\n                                <option value=\"AStar\"> A* </option>\r\n                            </select>\r\n                        </div>\r\n                    </Button>\r\n                    <Button>\r\n                        <div className =\"dropdown\">\r\n                            Speed:\r\n                            <select className = \"AlgorithmSelect\" onChange = {this.selectSpeed} >\r\n                                <option value=\"Fast\"> Fast </option>\r\n                                <option value=\"Slow\"> Slow </option>\r\n                                <option value=\"Average\"> Average </option>\r\n                            </select>\r\n                        </div>\r\n                    </Button>\r\n                </nav>\r\n                <div className = \"iconListDiv\">\r\n                    <ul className=\"iconList\">\r\n                        <li className=\"iconList\">\r\n                            <div className='box startNode'>\r\n                            </div>\r\n                            Start Node\r\n                        </li>\r\n                        <li className=\"iconList\">\r\n                            <div className='box endNode'>\r\n                            </div>\r\n                            End Node\r\n                        </li>\r\n                        <li className=\"iconList\">\r\n                            <div className='box'>\r\n                            </div>\r\n                            Unvisited Node\r\n                        </li>\r\n                        <li className=\"iconList\">\r\n                            <div className='box visitedNode'>\r\n                            </div>\r\n                            Visited Node\r\n                        </li>\r\n                        <li className=\"iconList\">\r\n                            <div className='box Wall'>\r\n                            </div>\r\n                            Wall\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"grid\">\r\n                {nodes.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx} className={`row-${rowIdx}`}>\r\n                            {row.map((node, nodeIdx) => {\r\n                                const {isStart, isFinish,isAnimated, row, col,isWall, isShortestPathNode,nodeWeight} = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        isStart = {isStart}\r\n                                        isFinish = {isFinish}\r\n                                        isAnimated = {isAnimated}\r\n                                        isWall = {isWall}\r\n                                        isShortestPathNode = {isShortestPathNode}\r\n                                        onMouseDown={(row,col) => this.handleMouseDown(row,col)}\r\n                                        onMouseEnter={(row,col) => this.handleMouseEnter(row,col)}\r\n                                        mousePressed ={mousePressed}\r\n                                        onMouseUp= {() => this.handleMouseUp(row,col)}\r\n                                        onMouseOver={ () => this.handleMouseOver(row,col)}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        instantAnimation = {alreadyVisualized}\r\n                                        nodeWeight = {nodeWeight}\r\n                                    >\r\n                                    </Node>\r\n                                );\r\n                            })}\r\n                    </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>);\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Path from './PathFindingVisualizer/Path';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Path></Path>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}