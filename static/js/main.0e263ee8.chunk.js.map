{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","PathFindingVisualizer/Algorithms/Djikstra.js","PathFindingVisualizer/Path.jsx","PathFindingVisualizer/Algorithms/BFS.js","PathFindingVisualizer/Algorithms/DFS.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","isFinish","isStart","isAnimated","row","col","isWall","onMouseDown","onMouseEnter","onMouseUp","isShortestPathNode","instantAnimation","onMouseOver","nodeWeight","extraClassName","id","className","Component","Dijkstra","grid","startNode","endNode","countOfNodeNotVisited","length","visitedInOrder","push","minDistanceCoordinate","findMinimumDistanceInGrid","currentNode","currentNodeDistance","currentRow","currentCol","aboveNode","aboveNodeDistance","toTopNodeDistance","bottomNode","bottomNodeDistance","toBottomNodeDistance","leftNode","leftNodeDistance","toLeftNodeDistance","rightNode","rightNodeDistance","toRightNodeDistance","console","log","currentMinimumDistance","currentMinDistanceCoordinate","currentDistance","constructShortestPath","StartNode","startRow","startCol","visitedStack","topNode","topNodeDistancePlusOne","bottomNodeDistancePlusOne","leftNodeDistancePlusOne","rightNodeDistancePlusOne","previousNodeCoords","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","TIME_OUT_CONST","Path","prop","nodes","mousePressed","algorithm","movingStartNode","previousStartNode","movingEndNode","previousEndNode","currentStartNode","currentEndNode","alreadyVisualized","inAnimation","addingWeight","selectAlgorithm","bind","visualizeDFS","visualizeBFS","setAddingWeight","setState","nodeObject","isTop","isBottom","GRID_ROW_LENGTH","isLeft","isRight","GRID_COL_LENGTH","isVisited","distance","previous","newGrid","slice","newNode","oldNoLongerStartNode","clearBoard","setTimeout","instantAnimationWithShortestPath","oldNoLongerEndNode","makeNewGridWithWeight","makeNewGridWithWall","visitedNode","endRow","endCol","queueOfVisited","shift","belowNode","BFS","animate","stack","returnVisitedStack","pop","DFS","initialAnimationFinished","beforeTimeStartInterval","shortestPath","reverse","animateShortestPath","setTimeoutAgainFk","shouldSetTimeout","i","node","currentFinalNode","resetAlreadyVisualized","column","visualizeDjikstra","event","target","value","message","Button","onClick","visualizeAlgorithm","clearWall","onChange","selectSpeed","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseOver","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e263ee8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        const {isFinish,\r\n            isStart,\r\n            isAnimated,\r\n            row,\r\n            col,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isShortestPathNode,\r\n            instantAnimation,\r\n            onMouseOver,\r\n            nodeWeight,\r\n        } = this.props;\r\n        var extraClassName = isFinish ? 'node-finish':\r\n            isStart ? 'node-start':\r\n            isShortestPathNode ? 'node-shortest-path':\r\n            isAnimated ? 'node-visited':\r\n            isWall ? 'node-wall':\r\n            nodeWeight !== 1 ? 'node-weight':\r\n            '';\r\n        if (instantAnimation && !isStart && !isFinish) {\r\n            if (extraClassName === \"node-shortest-path\" || extraClassName === \"node-visited\") {\r\n                extraClassName += \"-instant-animation\"\r\n            }\r\n        }\r\n        return <div\r\n            id = {`node-${row}-${col}`}\r\n            className={`node ${extraClassName}`}\r\n            onMouseDown ={() => onMouseDown(row,col)}\r\n            onMouseEnter ={() => onMouseEnter(row,col)}\r\n            onMouseOver = {() => onMouseOver(row,col)}\r\n            onMouseUp = {() => onMouseUp(row,col)}>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n    row: 0,\r\n    col: 0,\r\n};\r\n\r\n","// export function Dijkstra(grid, startNode, endNode) {\n//     const {row,col} = startNode;\n//     const endRow = endNode['row'];\n//     const endCol = endNode['col'];\n//     const queueOfVisited = [];\n//     // console.log(grid);\n//     const visitedInOrder = [];\n//     if (grid != null && startNode != null) {\n//         queueOfVisited.push(startNode);\n//     }\n//     while (queueOfVisited.length > 0) {\n//         findMinimumDistanceInGrid(grid);\n//         const currentNode = queueOfVisited.shift();\n//         visitedInOrder.push(currentNode);\n//         // if (currentNode['col'] === 4) {\n//         //     if(currentNode['row'] === 2) {\n//         //         console.log('2,4');\n//         //     }\n//         //     if (currentNode['row'] === 3) {\n//         //         console.log('3,4');\n//         //     }\n//         // }\n//         if (!currentNode['isVisited']) {\n//             const currentRow = currentNode['row'];\n//             const currentCol = currentNode['col'];\n//             const currentDistance = currentNode['distance'];\n//             // var nextDistance = currentDistance + currentNode['nodeWeight'];\n//             if (currentNode['isTop'] === false) {\n//                 const aboveNode = grid[currentRow - 1][currentCol];\n//                 if (!aboveNode['isWall']) {\n//                     if (aboveNode['isVisited'] === false) {\n//                         queueOfVisited.push(aboveNode);\n//                     }\n//                     const aboveNodeDistance = aboveNode['distance'];\n//                     const nextDistance = currentDistance + aboveNode['nodeWeight'];\n//                     if (currentNode['row'] === 3 && currentNode['col'] === 4) {\n//                         console.log(\"Above node weight is \" + aboveNode['nodeWeight']);\n//                         console.log(\"From current to above node is \" + nextDistance);\n//                         console.log(\"Top node current distance is \" + aboveNodeDistance);\n//                         console.log(\"Current distance is \" + currentDistance);\n//                     }\n//                     if ( nextDistance < aboveNodeDistance) {\n//                         aboveNode['distance'] = nextDistance;\n//                         aboveNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             if (currentNode['isBottom'] === false) {\n//                 const belowNode = grid[currentRow + 1][currentCol];\n//                 if (!belowNode['isWall']) {\n//                     if (belowNode['isVisited'] === false) {\n//                         queueOfVisited.push(belowNode);\n//                     }\n//                     const belowNodeDistance = belowNode['distance'];\n//                     const nextDistance = currentDistance + belowNode['nodeWeight'];\n//                     if (nextDistance < belowNodeDistance) {\n//                         belowNode['distance'] = nextDistance;\n//                         belowNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             if (currentNode['isLeft'] === false) {\n//                 const leftNode = grid[currentRow][currentCol - 1];\n//                 if (!leftNode['isWall']) {\n//                     if (leftNode['isVisited'] === false) {\n//                         queueOfVisited.push(leftNode);\n//                     }\n//                     const leftNodeDistance = leftNode['distance'];\n//                     const nextDistance = currentDistance + leftNode['nodeWeight'];\n//                     if (nextDistance < leftNodeDistance) {\n//                         leftNode['distance'] = nextDistance;\n//                         leftNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             if (currentNode['isRight'] === false) {\n//                 const rightNode = grid[currentRow][currentCol + 1];\n//                 if (!rightNode['isWall']) {\n//                     if (rightNode['isVisited'] === false) {\n//                         queueOfVisited.push(rightNode);\n//                     }\n//                     const rightNodeDistance = rightNode['distance'];\n//                     const nextDistance = currentDistance + rightNode['nodeWeight'];\n//                     if (nextDistance < rightNodeDistance) {\n//                         rightNode['distance'] = nextDistance;\n//                         rightNode['previous'] = [currentRow, currentCol];\n//                     }\n//                 }\n//             }\n//             currentNode['isVisited'] = true;\n//         }\n//     }\n//     return visitedInOrder;\n// }\n\nexport function Dijkstra(grid, startNode, endNode) {\n    const {row,col} = startNode;\n    const endRow = endNode['row'];\n    const endCol = endNode['col'];\n    var countOfNodeNotVisited = grid.length * grid[0].length;\n    const queueOfVisited = [];\n    const visitedInOrder = [];\n    if (grid != null && startNode != null) {\n        queueOfVisited.push(startNode);\n    }\n    while (countOfNodeNotVisited > 0) {\n        const minDistanceCoordinate = findMinimumDistanceInGrid(grid);\n        if (minDistanceCoordinate.length > 0) {\n            const currentNode = grid[minDistanceCoordinate[0]][minDistanceCoordinate[1]];\n            const currentNodeDistance = currentNode['distance'];\n            const currentRow = minDistanceCoordinate[0];\n            const currentCol = minDistanceCoordinate[1];\n            if (!currentNode['isWall']) {\n                if (!currentNode['isTop']) {\n                    const aboveNode = grid[currentRow - 1][currentCol];\n                    if (!aboveNode['isWall']) {\n                        const aboveNodeDistance = aboveNode['distance'];\n                        const aboveNodeWeight = aboveNode['nodeWeight'];\n                        const toTopNodeDistance = currentNodeDistance + aboveNodeWeight;\n                        if (toTopNodeDistance < aboveNodeDistance) {\n                            aboveNode['distance'] = toTopNodeDistance;\n                            aboveNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                if (!currentNode['isBottom']) {\n                    const bottomNode = grid[currentRow + 1][currentCol];\n                    if (!bottomNode['isWall']) {\n                        const bottomNodeDistance = bottomNode['distance'];\n                        const bottomNodeWeight = bottomNode['nodeWeight'];\n                        const toBottomNodeDistance = currentNodeDistance + bottomNodeWeight;\n                        if (toBottomNodeDistance < bottomNodeDistance) {\n                            bottomNode['distance'] = toBottomNodeDistance;\n                            bottomNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                if (!currentNode['isLeft']) {\n                    const leftNode = grid[currentRow][currentCol - 1];\n                    if (!leftNode['isWall']) {\n                        const leftNodeDistance = leftNode['distance'];\n                        const leftNodeWeight = leftNode['nodeWeight'];\n                        const toLeftNodeDistance = currentNodeDistance + leftNodeWeight;\n                        if (toLeftNodeDistance < leftNodeDistance) {\n                            leftNode['distance'] = toLeftNodeDistance;\n                            leftNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                if (!currentNode['isRight']) {\n                    const rightNode = grid[currentRow][currentCol + 1];\n                    if (!rightNode['isWall']) {\n                        const rightNodeDistance = rightNode['distance'];\n                        const rightNodeWeight = rightNode['nodeWeight'];\n                        const toRightNodeDistance = currentNodeDistance + rightNodeWeight;\n                        if (toRightNodeDistance < rightNodeDistance) {\n                            rightNode['distance'] = toRightNodeDistance;\n                            rightNode['previous'] = [currentRow, currentCol];\n                        }\n                    }\n                }\n                visitedInOrder.push(currentNode);\n                currentNode['isVisited'] = true;\n            }\n        }\n        countOfNodeNotVisited -= 1;\n    }\n    console.log(\"finished the loop\");\n    console.log(grid);\n    return visitedInOrder;\n}\n\nfunction findMinimumDistanceInGrid(grid) {\n    var currentMinimumDistance = 99999999999;\n    var currentMinDistanceCoordinate = [];\n    for (let row = 0; row < grid.length; row ++) {\n        const currentRow = grid[row];\n        for (let col = 0; col < currentRow.length; col ++) {\n            const currentNode = currentRow[col];\n            if (!currentNode['isVisited'] && !currentNode['isWall']) {\n                const currentDistance = currentNode['distance'];\n                if (currentDistance < currentMinimumDistance) {\n                    currentMinimumDistance = currentDistance;\n                    currentMinDistanceCoordinate = [currentNode['row'], currentNode['col']]\n                }\n            }\n        }\n    }\n    console.log(\"current smallest distance in grid is \" + currentMinimumDistance);\n    console.log(\"The coordinate is \" + currentMinDistanceCoordinate);\n    return currentMinDistanceCoordinate;\n}\n\nexport function constructShortestPath(grid,StartNode,endNode) {\n    const startRow = StartNode['row'];\n    const startCol = StartNode['col'];\n    var currentNode = endNode;\n    var visitedStack = [];\n    const currentRow = endNode['row'];\n    const currentCol = endNode['col'];\n    if (!endNode['isTop']) {\n        const topNode = grid[currentRow - 1][currentCol];\n        const topNodeDistancePlusOne = topNode['distance'] + 1;\n        if (topNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = topNodeDistancePlusOne;\n            endNode['previous'] = [topNode['row'], topNode['col']];\n        }\n    }\n    if (!endNode['isBottom']) {\n        const bottomNode = grid[currentRow + 1][currentCol];\n        const bottomNodeDistancePlusOne = bottomNode['distance'] + 1;\n        if (bottomNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = bottomNodeDistancePlusOne;\n            endNode['previous'] = [bottomNode['row'], bottomNode['col']];\n        }\n    }\n    if (!endNode['isLeft']){\n        const leftNode = grid[currentRow][currentCol - 1];\n        const leftNodeDistancePlusOne = leftNode['distance'] + 1;\n        if (leftNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = leftNodeDistancePlusOne;\n            endNode['previous'] = [leftNode['row'], leftNode['col']];\n        }\n    }\n    if (!endNode['isRight']) {\n        const rightNode = grid[currentRow][currentCol + 1];\n        const rightNodeDistancePlusOne = rightNode['distance'] + 1;\n        if (rightNodeDistancePlusOne < endNode['distance']) {\n            endNode['distance'] = rightNodeDistancePlusOne;\n            endNode['previous'] = [rightNode['row'], rightNode['col']];\n        }\n    }\n    while (currentNode != null) {\n        if (currentNode['distance'] === 99999999) {\n            return \"No path exist\";\n        } else {\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            if (currentRow === startRow && currentCol === startCol) {\n                return visitedStack;\n            } else {\n                const previousNodeCoords = currentNode['previous'];\n                currentNode = grid[previousNodeCoords[0]][previousNodeCoords[1]]\n            }\n            visitedStack.push(currentNode);\n        }\n    }\n    return visitedStack;\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './Path.css'\r\nimport {BFS} from './Algorithms/BFS';\r\nimport {DFS} from \"./Algorithms/DFS\";\r\nimport {constructShortestPath, Dijkstra} from \"./Algorithms/Djikstra\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nconst START_NODE_ROW = 0;\r\nconst START_NODE_COL = 0;\r\nconst FINISH_NODE_ROW = 3;\r\nconst FINISH_NODE_COL = 0;\r\nconst GRID_ROW_LENGTH = 25;\r\nconst GRID_COL_LENGTH = 50;\r\nvar TIME_OUT_CONST = 25;\r\n\r\nexport default class Path extends Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.state = {\r\n            nodes: [],\r\n            mousePressed: false,\r\n            algorithm: \"BFS\",\r\n            movingStartNode: false,\r\n            previousStartNode: [START_NODE_ROW, START_NODE_COL],\r\n            movingEndNode: false,\r\n            previousEndNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n            currentStartNode: [START_NODE_ROW, START_NODE_COL],\r\n            currentEndNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n            alreadyVisualized: false,\r\n            inAnimation: false,\r\n            addingWeight: false,\r\n        };\r\n        this.selectAlgorithm = this.selectAlgorithm.bind(this);\r\n        this.visualizeDFS = this.visualizeDFS.bind(this);\r\n        this.visualizeBFS = this.visualizeBFS.bind(this);\r\n        this.setAddingWeight = this.setAddingWeight.bind(this);\r\n    }\r\n\r\n    setAddingWeight() {\r\n        this.setState({addingWeight:!this.state.addingWeight});\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {currentStartNode, currentEndNode} = this.state;\r\n        const nodes = [];\r\n        for (let row = 0; row < GRID_ROW_LENGTH; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < GRID_COL_LENGTH; col++) {\r\n                const nodeObject = {\r\n                    row,\r\n                    col,\r\n                    isStart: row === currentStartNode[0] && col === currentStartNode[1],\r\n                    isFinish: row === currentEndNode[0] && col === currentEndNode[1],\r\n                    isTop: row === 0,\r\n                    isBottom: row === GRID_ROW_LENGTH-1,\r\n                    isLeft: col === 0,\r\n                    isRight: col === GRID_COL_LENGTH-1,\r\n                    isVisited: false,\r\n                    isAnimated: false,\r\n                    isWall: false,\r\n                    distance: row === currentStartNode[0] && col === currentStartNode[1] ? 0 : 99999999,\r\n                    previous : [null,null],\r\n                    isShortestPathNode: false,\r\n                    instantAnimation: false,\r\n                    nodeWeight: 1,\r\n                };\r\n                currentRow.push(nodeObject)\r\n            }\r\n            nodes.push(currentRow)\r\n        }\r\n        this.setState({nodes});\r\n    }\r\n\r\n    handleMouseDown(row,col) {\r\n        const mousePressed = this.state.mousePressed;\r\n        if (this.state.nodes[row][col].isStart) {\r\n            // console.log(\"Start Node Move\");\r\n            this.setState({movingStartNode:true, previousStartNode: [row,col]});\r\n            return;\r\n        } else if (this.state.nodes[row][col].isFinish) {\r\n            // console.log(\"End Node Move\");\r\n            this.setState({movingEndNode:true, previousEndNode: [row,col]});\r\n            return;\r\n        }\r\n        this.setState({mousePressed: !mousePressed});\r\n    }\r\n\r\n    handleMouseUp(row,col) {\r\n        const {previousStartNode, previousEndNode} = this.state;\r\n        this.setState({mousePressed:false, movingStartNode:false, movingEndNode:false});\r\n    }\r\n\r\n    handleMouseOver(row,col) {\r\n        const {previousStartNode, previousEndNode} = this.state;\r\n        if (this.state.movingStartNode) {\r\n            // console.log(\"Moving start Node\");\r\n            const newGrid = this.state.nodes.slice();\r\n            const currentNode = this.state.nodes[row][col];\r\n            const newNode = {\r\n                ...currentNode,\r\n                isStart: true,\r\n                distance: 0,\r\n            };\r\n            const oldStartNode = this.state.nodes[previousStartNode[0]][previousStartNode[1]];\r\n            const oldNoLongerStartNode = {\r\n                ...oldStartNode,\r\n                isStart: false,\r\n                distance: 99999999,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n            newGrid[previousStartNode[0]][previousStartNode[1]] = oldNoLongerStartNode;\r\n            this.setState({nodes:newGrid, currentStartNode: [newNode.row,newNode.col], previousStartNode:[newNode.row, newNode.col]});\r\n            this.clearBoard();\r\n\r\n            // console.log(\"Start node instant animation\");\r\n            // console.log(\"Current algorithm is\" + this.state.algorithm + \" alreadyVisualized = \" + this.state.alreadyVisualized);\r\n            if (this.state.algorithm === \"Djikstra\" && this.state.alreadyVisualized) {\r\n                setTimeout(() => {\r\n                    // this.clearBoard();\r\n                    this.instantAnimationWithShortestPath();\r\n                }, 0)\r\n            }\r\n        } else if (this.state.movingEndNode) {\r\n            // console.log(\"Moving End Node\");\r\n            const newGrid = this.state.nodes.slice();\r\n            const currentNode = this.state.nodes[row][col];\r\n            const newNode = {\r\n                ...currentNode,\r\n                isFinish: true\r\n            };\r\n            const oldEndNode = this.state.nodes[previousEndNode[0]][previousEndNode[1]];\r\n            const oldNoLongerEndNode = {\r\n                ...oldEndNode,\r\n                isFinish: false,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n            newGrid[previousEndNode[0]][previousEndNode[1]] = oldNoLongerEndNode;\r\n            this.setState({nodes:newGrid, currentEndNode:[newNode.row, newNode.col], previousEndNode: [newNode.row, newNode.col]});\r\n            this.clearBoard();\r\n            // console.log(\"end node instant animation \");\r\n            if (this.state.algorithm === \"Djikstra\" && this.state.alreadyVisualized) {\r\n                setTimeout(() => {\r\n                    // this.clearBoard();\r\n                    this.instantAnimationWithShortestPath();\r\n                }, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleMouseEnter(row,col) {\r\n        // console.log(\"MousePressed \" + this.state.mousePressed);\r\n        if (!this.state.mousePressed) return;\r\n        if (!this.state.addingWeight) {\r\n            const newGrid = this.makeNewGridWithWall(row, col);\r\n            this.setState({nodes:newGrid});\r\n        }\r\n        else {\r\n            const newGrid = this.makeNewGridWithWeight(row, col);\r\n            this.setState({nodes:newGrid});\r\n        }\r\n    }\r\n\r\n    makeNewGridWithWeight(row,col) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const currentNode = this.state.nodes[row][col];\r\n        if (!currentNode.isWall) {\r\n            const newNode = {\r\n                ...currentNode,\r\n                nodeWeight: currentNode.nodeWeight === 1 ? 10: 1\r\n            };\r\n            newGrid[row][col] = newNode;\r\n        }\r\n        return newGrid;\r\n    }\r\n\r\n    // This function is used to make 'walls' in the grid\r\n    makeNewGridWithWall(row,col) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const currentNode = this.state.nodes[row][col];\r\n        const newNode = {\r\n            ...currentNode,\r\n            isWall: !currentNode['isWall']\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    }\r\n\r\n    // Determine if there is a path from start to end via BFS\r\n    visualizeBFS() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = BFS(nodes, startNode, endNode);\r\n        this.animate(visitedNode);\r\n    }\r\n\r\n    // Determine if there is a path from start to end via DFS\r\n    visualizeDFS() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = DFS(nodes, startNode, endNode);\r\n        this.animate(visitedNode);\r\n    }\r\n\r\n    //This function will find the shortest path from start to end via Djikstra\r\n    visualizeDjikstra() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = Dijkstra(nodes,startNode,endNode);\r\n        const beforeTimeStartInterval = this.animate(visitedNode) + 35;\r\n        this.setState({inAnimation: true});\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        console.log(nodes);\r\n        this.animateShortestPath(shortestPath,beforeTimeStartInterval,true);\r\n        const setTimeoutAgainFk = shortestPath.length + beforeTimeStartInterval;\r\n        setTimeout(() => {\r\n            this.setState({alreadyVisualized: true, inAnimation:false})\r\n        }, TIME_OUT_CONST * (setTimeoutAgainFk + 10))\r\n    }\r\n\r\n    // visitedNode(List) = All of the nodes that makes the shortest path from start to end\r\n    // beforeTimeStartInterval(Integer) = How many nodes are visited before we found our end node\r\n    // shouldSetTimeout(Boolean) = determines if we should be using instant animation or not.\r\n    animateShortestPath(visitedNode, beforeTimeStartInterval, shouldSetTimeout) {\r\n        const newGrid = this.state.nodes.slice();\r\n        // this.setState({inAnimation:true});\r\n        // console.log(\"Setting shortest path inAnimation to true\");\r\n        if (shouldSetTimeout) {\r\n            for (let i = 0; i < visitedNode.length; i++) {\r\n                const node = visitedNode[i];\r\n                const newNode = {\r\n                    ...node,\r\n                    isShortestPathNode: true,\r\n                };\r\n                setTimeout(() => {\r\n                    newGrid[node.row][node.col] = newNode;\r\n                    this.setState({nodes: newGrid});\r\n                }, TIME_OUT_CONST * (i + beforeTimeStartInterval));\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(visitedNode) {\r\n        this.setState({inAnimation:true});\r\n        // console.log(visitedNode.length);\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node.row === currentFinalNode[0] && node.col === currentFinalNode[1]) {\r\n                setTimeout(() => {\r\n                    this.setState({inAnimation:false});\r\n                }, (i+20)*TIME_OUT_CONST);\r\n                return i;\r\n            }\r\n            if (node['nodeWeight'] === 1) {\r\n                setTimeout(() => {\r\n                        const newGrid = this.state.nodes.slice();\r\n                        const newNode = {\r\n                            ...node,\r\n                            isAnimated: true,\r\n                        };\r\n                        newGrid[node.row][node.col] = newNode;\r\n                        this.setState({nodes: newGrid})\r\n                    },\r\n                    TIME_OUT_CONST * i);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    instantAnimationWithShortestPath() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        // console.log(nodes);\r\n        // console.log(\"start node is \" + startNode.row + \",\" + startNode.col);\r\n        // console.log(\"end node is \" + endNode.row + \",\" + endNode.col);\r\n        const visitedNode = Dijkstra(nodes,startNode,endNode);\r\n        // console.log(\"Went through Djikstra\");\r\n        const newGrid = this.state.nodes.slice();\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node.row === currentFinalNode[0] && node.col === currentFinalNode[1]) {\r\n                break;\r\n            }\r\n            const newNode = {\r\n                ...node,\r\n                isAnimated: true,\r\n            };\r\n            newGrid[node.row][node.col] = newNode;\r\n        }\r\n        // console.log(\"Before shortest path\");\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        for (let i = 0; i < shortestPath.length; i++) {\r\n            const node = shortestPath[i];\r\n            const newNode = {\r\n                ...node,\r\n                isShortestPathNode: true,\r\n            };\r\n            newGrid[newNode.row][newNode.col] = newNode;\r\n        };\r\n        this.setState({nodes:newGrid});\r\n    }\r\n\r\n    clearBoard(resetAlreadyVisualized) {\r\n        const {nodes,currentStartNode,currentEndNode, inAnimation} = this.state;\r\n        const newGrid = this.state.nodes.slice();\r\n        if (!inAnimation) {\r\n            for (var row = 0; row < nodes.length; row++) {\r\n                const column = nodes[row];\r\n                for (var col = 0; col < column.length; col++) {\r\n                    var currentNode = column[col];\r\n                    if (currentNode['isStart']) {\r\n                        // currentNode['isWall'] = false;\r\n                        currentNode['isAnimated'] = false;\r\n                        currentNode['isVisited'] = false;\r\n                        currentNode['isShortestPathNode'] = false;\r\n                        currentNode['distance'] = 0;\r\n                        newGrid[row][col] = currentNode\r\n                    } else {\r\n                        // currentNode['isWall'] = false;\r\n                        currentNode['isAnimated'] = false;\r\n                        currentNode['isVisited'] = false;\r\n                        currentNode['isShortestPathNode'] = false;\r\n                        currentNode['distance'] = 99999999;\r\n                        newGrid[row][col] = currentNode\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"After clearing board\");\r\n            // console.log(newGrid);\r\n            this.setState({nodes:newGrid});\r\n            if (resetAlreadyVisualized) {\r\n                this.setState({alreadyVisualized:false})\r\n            }\r\n        }\r\n    }\r\n\r\n    clearWall() {\r\n        const {nodes,inAnimation} = this.state;\r\n        if (!inAnimation) {\r\n            const newGrid = this.state.nodes.slice();\r\n            for (var row = 0; row < nodes.length; row++) {\r\n                const column = nodes[row];\r\n                for (var col = 0; col < column.length; col++) {\r\n                    var currentNode = column[col];\r\n                    currentNode['isWall'] = false;\r\n                    currentNode['nodeWeight'] = 1;\r\n                }\r\n            }\r\n            this.setState({nodes: newGrid})\r\n        }\r\n    }\r\n\r\n\r\n    visualizeAlgorithm() {\r\n        const {algorithm} = this.state;\r\n        this.clearBoard();\r\n        if (algorithm === \"BFS\") {\r\n            this.visualizeBFS();\r\n        } else if (algorithm === \"DFS\") {\r\n            this.visualizeDFS();\r\n        } else if (algorithm === \"Djikstra\") {\r\n            this.visualizeDjikstra()\r\n            // this.instantAnimationWithShortestPath();\r\n        }\r\n    }\r\n\r\n    selectSpeed(event) {\r\n        if (event.target.value === \"Fast\") {\r\n            TIME_OUT_CONST = 20;\r\n        } else if (event.target.value === \"Average\") {\r\n            TIME_OUT_CONST = 50;\r\n        } else if (event.target.value === \"Slow\") {\r\n            TIME_OUT_CONST = 100;\r\n        }\r\n    }\r\n\r\n    selectAlgorithm(event) {\r\n        this.setState({algorithm: event.target.value});\r\n        this.clearBoard();\r\n    }\r\n\r\n\r\n    render() {\r\n        const {nodes, mousePressed,algorithm, alreadyVisualized, addingWeight} = this.state;\r\n        var message = \"Add weight\";\r\n        if (addingWeight) {\r\n            message = \"Stop adding weight\";\r\n        }\r\n        return (\r\n            <div className =\"outerContainer\">\r\n                <Button className=\"button\" onClick={() => this.visualizeAlgorithm()}>\r\n                    Visualize {algorithm}\r\n                </Button>\r\n                <Button className=\"button\" onClick={() => this.clearBoard(true)}>\r\n                    Clear Board\r\n                </Button>\r\n                <Button className=\"button\" onClick={() => this.clearWall()}>\r\n                    Clear Wall\r\n                </Button>\r\n                <Button className=\"button\" onClick={() => this.setAddingWeight()}>\r\n                    {message}\r\n                </Button>\r\n                <Button>\r\n                    <div className =\"dropdown\">\r\n                        <select className =\"AlgorithmSelect\" onChange={this.selectAlgorithm}>\r\n                            <option value=\"BFS\"> BFS</option>\r\n                            <option value=\"DFS\"> DFS</option>\r\n                            <option value=\"Djikstra\"> Djikstra </option>\r\n                        </select>\r\n                    </div>\r\n                </Button>\r\n                <Button>\r\n                    <div className =\"dropdown\">\r\n                        Speed:\r\n                        <select className = \"AlgorithmSelect\" onChange = {this.selectSpeed} >\r\n                            <option value=\"Fast\"> Fast </option>\r\n                            <option value=\"Slow\"> Slow </option>\r\n                            <option value=\"Average\"> Average </option>\r\n                        </select>\r\n                    </div>\r\n                </Button>\r\n                <ul className=\"iconList\">\r\n                    <li className=\"iconList\">\r\n                        <div className='box startNode'>\r\n                        </div>\r\n                        Start Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box endNode'>\r\n                        </div>\r\n                        End Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box'>\r\n                        </div>\r\n                        Unvisited Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box visitedNode'>\r\n                        </div>\r\n                        Visited Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box Wall'>\r\n                        </div>\r\n                        Wall\r\n                    </li>\r\n                </ul>\r\n                <div className=\"grid\">\r\n                {nodes.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx} className={`row-${rowIdx}`}>\r\n                            {row.map((node, nodeIdx) => {\r\n                                const {isStart, isFinish,isAnimated, row, col,isWall, isShortestPathNode,nodeWeight} = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        isStart = {isStart}\r\n                                        isFinish = {isFinish}\r\n                                        isAnimated = {isAnimated}\r\n                                        isWall = {isWall}\r\n                                        isShortestPathNode = {isShortestPathNode}\r\n                                        onMouseDown={(row,col) => this.handleMouseDown(row,col)}\r\n                                        onMouseEnter={(row,col) => this.handleMouseEnter(row,col)}\r\n                                        mousePressed ={mousePressed}\r\n                                        onMouseUp= {() => this.handleMouseUp(row,col)}\r\n                                        onMouseOver={ () => this.handleMouseOver(row,col)}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        instantAnimation = {alreadyVisualized}\r\n                                        nodeWeight = {nodeWeight}\r\n                                    >\r\n                                    </Node>\r\n                                );\r\n                            })}\r\n                    </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>);\r\n    }\r\n}","\r\nexport function BFS(grid, startNode, endNode) {\r\n    const {row,col} = startNode;\r\n    const endRow = endNode['row'];\r\n    const endCol = endNode['col'];\r\n    const queueOfVisited = [];\r\n    const visitedInOrder = [];\r\n    if (grid != null && startNode != null) {\r\n        queueOfVisited.push(startNode);\r\n    }\r\n    while (queueOfVisited.length > 0) {\r\n        const currentNode = queueOfVisited.shift();\r\n        const currentRow = currentNode['row'];\r\n        const currentCol = currentNode['col'];\r\n        visitedInOrder.push(currentNode);\r\n        currentNode['isVisited'] = true;\r\n        if (currentRow === endRow && currentCol === endCol) {\r\n            return visitedInOrder;\r\n        }\r\n        if (currentNode['isTop'] === false) {\r\n            const aboveNode = grid[currentRow-1][currentCol];\r\n            if (aboveNode['isVisited'] === false && !aboveNode['isWall']) {\r\n                queueOfVisited.push(aboveNode);\r\n                aboveNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isBottom'] === false) {\r\n            const belowNode = grid[currentRow+1][currentCol];\r\n            if (belowNode['isVisited'] === false && !belowNode['isWall']) {\r\n                queueOfVisited.push(belowNode);\r\n                belowNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isLeft'] === false) {\r\n            const leftNode = grid[currentRow][currentCol-1];\r\n            if (leftNode['isVisited'] === false && !leftNode['isWall']) {\r\n                queueOfVisited.push(leftNode);\r\n                leftNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isRight'] === false) {\r\n            const rightNode = grid[currentRow][currentCol+1];\r\n            if (rightNode['isVisited'] === false && !rightNode['isWall']) {\r\n                queueOfVisited.push(rightNode);\r\n                rightNode['isVisited'] = true;\r\n            }\r\n        }\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\n","export function DFS(grid, startNode, endNode) {\n    const{row,col} = startNode;\n    const endRow = endNode['row'];\n    const endCol = endNode['col'];\n    var stack =[];\n    var returnVisitedStack = [];\n    if (grid != null && startNode != null) {\n        stack.push(startNode);\n    }\n    console.log(stack);\n    while (stack.length > 0) {\n        const currentNode = stack.pop();\n        returnVisitedStack.push(currentNode);\n        if (currentNode['isVisited'] === false) {\n            currentNode['isVisited'] = true;\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            if (currentRow === endRow && currentCol === endCol) {\n                return returnVisitedStack;\n            } else {\n                if (currentNode['isTop'] === false) {\n                    const topNode = grid[currentRow - 1][currentCol];\n                    if (topNode['isVisited'] === false && !topNode['isWall']) {\n                        stack.push(topNode);\n                    }\n                }\n                if (currentNode['isBottom'] === false) {\n                    const bottomNode = grid[currentRow + 1][currentCol];\n                    if (bottomNode['isVisited'] === false && !bottomNode['isWall']) {\n                        stack.push(bottomNode);\n                    }\n                }\n                if (currentNode['isLeft'] === false) {\n                    const leftNode = grid[currentRow][currentCol - 1];\n                    if (leftNode['isVisited'] === false && !leftNode['isWall']) {\n                        stack.push(leftNode);\n                    }\n                }\n                if (currentNode['isRight'] === false) {\n                    const rightNode = grid[currentRow][currentCol + 1];\n                    if (rightNode['isVisited'] === false && !rightNode['isWall']) {\n                        stack.push(rightNode);\n                    }\n                }\n            }\n        }\n    }\n    return returnVisitedStack;\n}","import React from 'react';\nimport './App.css';\nimport Path from './PathFindingVisualizer/Path';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Path></Path>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}