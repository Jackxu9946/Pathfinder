{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","PathFindingVisualizer/Algorithms/Djikstra.js","PathFindingVisualizer/Path.jsx","PathFindingVisualizer/Algorithms/BFS.js","PathFindingVisualizer/Algorithms/DFS.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","isFinish","isStart","isAnimated","row","col","isWall","onMouseDown","onMouseEnter","onMouseUp","isShortestPathNode","instantAnimation","onMouseOver","extraClassName","id","className","Component","Dijkstra","grid","startNode","endNode","queueOfVisited","visitedInOrder","push","length","currentNode","shift","currentRow","currentCol","nextDistance","aboveNode","aboveNodeDistance","belowNode","belowNodeDistance","leftNode","leftNodeDistance","rightNode","rightNodeDistance","constructShortestPath","StartNode","startRow","startCol","visitedStack","previousNodeCoords","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Path","prop","nodes","mousePressed","algorithm","movingStartNode","previousStartNode","movingEndNode","previousEndNode","currentStartNode","currentEndNode","alreadyVisualized","inAnimation","addingWeight","selectAlgorithm","bind","visualizeDFS","visualizeBFS","nodeObject","isTop","isBottom","GRID_ROW_LENGTH","isLeft","isRight","GRID_COL_LENGTH","isVisited","distance","previous","nodeWeight","setState","newGrid","slice","newNode","oldNoLongerStartNode","clearBoard","setTimeout","instantAnimationWithShortestPath","oldNoLongerEndNode","makeNewGridWithWeight","makeNewGridWithWall","visitedNode","endRow","endCol","BFS","animate","stack","returnVisitedStack","console","log","pop","topNode","bottomNode","DFS","initialAnimationFinished","beforeTimeStartInterval","shortestPath","reverse","animateShortestPath","setTimeoutAgainFk","shouldSetTimeout","i","node","currentFinalNode","resetAlreadyVisualized","column","visualizeDjikstra","event","target","value","Button","onClick","visualizeAlgorithm","clearWall","onChange","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseOver","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.743cfe1d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    render() {\r\n        const {isFinish,\r\n            isStart,\r\n            isAnimated,\r\n            row,\r\n            col,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            isShortestPathNode,\r\n            instantAnimation,\r\n            onMouseOver,\r\n        } = this.props;\r\n        var extraClassName = isFinish ? 'node-finish':\r\n            isStart ? 'node-start':\r\n            isShortestPathNode ? 'node-shortest-path':\r\n            isAnimated ? 'node-visited':\r\n            isWall ? 'node-wall':\r\n            '';\r\n        if (instantAnimation && !isStart && !isFinish) {\r\n            if (extraClassName === \"node-shortest-path\" || extraClassName === \"node-visited\") {\r\n                extraClassName += \"-instant-animation\"\r\n            }\r\n        }\r\n        return <div\r\n            id = {`node-${row}-${col}`}\r\n            className={`node ${extraClassName}`}\r\n            onMouseDown ={() => onMouseDown(row,col)}\r\n            onMouseEnter ={() => onMouseEnter(row,col)}\r\n            onMouseOver = {() => onMouseOver(row,col)}\r\n            onMouseUp = {() => onMouseUp(row,col)}>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport const DEFAULT_NODE = {\r\n    row: 0,\r\n    col: 0,\r\n};\r\n\r\n","export function Dijkstra(grid, startNode, endNode) {\n    const {row,col} = startNode;\n    const endRow = endNode['row'];\n    const endCol = endNode['col'];\n    const queueOfVisited = [];\n    // console.log(grid);\n    const visitedInOrder = [];\n    if (grid != null && startNode != null) {\n        queueOfVisited.push(startNode);\n    }\n    while (queueOfVisited.length > 0) {\n        const currentNode = queueOfVisited.shift();\n        visitedInOrder.push(currentNode);\n        if (!currentNode['isVisited']) {\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            const currentDistance = currentNode['distance'];\n            var nextDistance = currentDistance + currentNode['nodeWeight'];\n            if (currentNode['isTop'] === false) {\n                const aboveNode = grid[currentRow - 1][currentCol];\n                if (aboveNode['isVisited'] === false && !aboveNode['isWall']) {\n                    queueOfVisited.push(aboveNode);\n                    const aboveNodeDistance = aboveNode['distance'];\n                    if (aboveNodeDistance === \"infinity\" || nextDistance < aboveNodeDistance) {\n                        aboveNode['distance'] = nextDistance;\n                        aboveNode['previous'] = [currentRow, currentCol];\n                    }\n                }\n            }\n            if (currentNode['isBottom'] === false) {\n                const belowNode = grid[currentRow + 1][currentCol];\n                if (belowNode['isVisited'] === false && !belowNode['isWall']) {\n                    queueOfVisited.push(belowNode);\n                    const belowNodeDistance = belowNode['distance'];\n                    if (belowNodeDistance === \"infinity\" || nextDistance < belowNodeDistance) {\n                        belowNode['distance'] = nextDistance;\n                        belowNode['previous'] = [currentRow, currentCol];\n                    }\n                }\n            }\n            if (currentNode['isLeft'] === false) {\n                const leftNode = grid[currentRow][currentCol - 1];\n                if (leftNode['isVisited'] === false && !leftNode['isWall']) {\n                    queueOfVisited.push(leftNode);\n                    const leftNodeDistance = leftNode['distance'];\n                    if (leftNodeDistance === \"infinity\" || nextDistance < leftNodeDistance) {\n                        leftNode['distance'] = nextDistance;\n                        leftNode['previous'] = [currentRow, currentCol];\n                    }\n                }\n            }\n            if (currentNode['isRight'] === false) {\n                const rightNode = grid[currentRow][currentCol + 1];\n                if (rightNode['isVisited'] === false && !rightNode['isWall']) {\n                    queueOfVisited.push(rightNode);\n                    const rightNodeDistance = rightNode['distance'];\n                    if (rightNodeDistance === \"infinity\" || nextDistance < rightNodeDistance) {\n                        rightNode['distance'] = nextDistance;\n                        rightNode['previous'] = [currentRow, currentCol];\n                    }\n                }\n            }\n            currentNode['isVisited'] = true;\n        }\n    }\n    return visitedInOrder;\n}\n\nexport function constructShortestPath(grid,StartNode,endNode) {\n    const startRow = StartNode['row'];\n    const startCol = StartNode['col'];\n    var currentNode = endNode;\n    var visitedStack = [];\n    while (currentNode != null) {\n        if (currentNode['distance'] === \"infinity\") {\n            return \"No path exist\";\n        } else {\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            if (currentRow === startRow && currentCol === startCol) {\n                return visitedStack;\n            } else {\n                const previousNodeCoords = currentNode['previous'];\n                currentNode = grid[previousNodeCoords[0]][previousNodeCoords[1]]\n            }\n            visitedStack.push(currentNode);\n        }\n    }\n    return visitedStack;\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './Path.css'\r\nimport {BFS} from './Algorithms/BFS';\r\nimport {DFS} from \"./Algorithms/DFS\";\r\nimport {constructShortestPath, Dijkstra} from \"./Algorithms/Djikstra\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nconst START_NODE_ROW = 3;\r\nconst START_NODE_COL = 5;\r\nconst FINISH_NODE_ROW = 5;\r\nconst FINISH_NODE_COL = 5;\r\nconst GRID_ROW_LENGTH = 20;\r\nconst GRID_COL_LENGTH = 50;\r\nconst TIME_OUT_CONST = 65;\r\n\r\nexport default class Path extends Component {\r\n    constructor(prop) {\r\n        super(prop);\r\n        this.state = {\r\n            nodes: [],\r\n            mousePressed: false,\r\n            algorithm: \"BFS\",\r\n            movingStartNode: false,\r\n            previousStartNode: [START_NODE_ROW, START_NODE_COL],\r\n            movingEndNode: false,\r\n            previousEndNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n            currentStartNode: [START_NODE_ROW, START_NODE_COL],\r\n            currentEndNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n            alreadyVisualized: false,\r\n            inAnimation: false,\r\n            addingWeight: false,\r\n        };\r\n        this.selectAlgorithm = this.selectAlgorithm.bind(this);\r\n        this.visualizeDFS = this.visualizeDFS.bind(this);\r\n        this.visualizeBFS = this.visualizeBFS.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {currentStartNode, currentEndNode} = this.state;\r\n        const nodes = [];\r\n        for (let row = 0; row < GRID_ROW_LENGTH; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < GRID_COL_LENGTH; col++) {\r\n                const nodeObject = {\r\n                    row,\r\n                    col,\r\n                    isStart: row === currentStartNode[0] && col === currentStartNode[1],\r\n                    isFinish: row === currentEndNode[0] && col === currentEndNode[1],\r\n                    isTop: row === 0,\r\n                    isBottom: row === GRID_ROW_LENGTH-1,\r\n                    isLeft: col === 0,\r\n                    isRight: col === GRID_COL_LENGTH-1,\r\n                    isVisited: false,\r\n                    isAnimated: false,\r\n                    isWall: false,\r\n                    distance: row === currentStartNode[0] && col === currentStartNode[1] ? 0 : \"infinity\",\r\n                    previous : [null,null],\r\n                    isShortestPathNode: false,\r\n                    instantAnimation: false,\r\n                    nodeWeight: 1,\r\n                };\r\n                currentRow.push(nodeObject)\r\n            }\r\n            nodes.push(currentRow)\r\n        }\r\n        this.setState({nodes});\r\n    }\r\n\r\n    handleMouseDown(row,col) {\r\n        const mousePressed = this.state.mousePressed;\r\n        if (this.state.nodes[row][col].isStart) {\r\n            // console.log(\"Start Node Move\");\r\n            this.setState({movingStartNode:true, previousStartNode: [row,col]});\r\n            return;\r\n        } else if (this.state.nodes[row][col].isFinish) {\r\n            // console.log(\"End Node Move\");\r\n            this.setState({movingEndNode:true, previousEndNode: [row,col]});\r\n            return;\r\n        }\r\n        this.setState({mousePressed: !mousePressed});\r\n    }\r\n\r\n    handleMouseUp(row,col) {\r\n        const {previousStartNode, previousEndNode} = this.state;\r\n        this.setState({mousePressed:false, movingStartNode:false, movingEndNode:false});\r\n    }\r\n\r\n    handleMouseOver(row,col) {\r\n        const {previousStartNode, previousEndNode} = this.state;\r\n        if (this.state.movingStartNode) {\r\n            // console.log(\"Moving start Node\");\r\n            const newGrid = this.state.nodes.slice();\r\n            const currentNode = this.state.nodes[row][col];\r\n            const newNode = {\r\n                ...currentNode,\r\n                isStart: true,\r\n                distance: 0,\r\n            };\r\n            const oldStartNode = this.state.nodes[previousStartNode[0]][previousStartNode[1]];\r\n            const oldNoLongerStartNode = {\r\n                ...oldStartNode,\r\n                isStart: false,\r\n                distance: \"infinity\",\r\n            };\r\n            newGrid[row][col] = newNode;\r\n            newGrid[previousStartNode[0]][previousStartNode[1]] = oldNoLongerStartNode;\r\n            this.setState({nodes:newGrid, currentStartNode: [newNode.row,newNode.col], previousStartNode:[newNode.row, newNode.col]});\r\n            this.clearBoard();\r\n\r\n            // console.log(\"Start node instant animation\");\r\n            // console.log(\"Current algorithm is\" + this.state.algorithm + \" alreadyVisualized = \" + this.state.alreadyVisualized);\r\n            if (this.state.algorithm === \"Djikstra\" && this.state.alreadyVisualized) {\r\n                setTimeout(() => {\r\n                    // this.clearBoard();\r\n                    this.instantAnimationWithShortestPath();\r\n                }, 0)\r\n            }\r\n        } else if (this.state.movingEndNode) {\r\n            // console.log(\"Moving End Node\");\r\n            const newGrid = this.state.nodes.slice();\r\n            const currentNode = this.state.nodes[row][col];\r\n            const newNode = {\r\n                ...currentNode,\r\n                isFinish: true\r\n            };\r\n            const oldEndNode = this.state.nodes[previousEndNode[0]][previousEndNode[1]];\r\n            const oldNoLongerEndNode = {\r\n                ...oldEndNode,\r\n                isFinish: false,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n            newGrid[previousEndNode[0]][previousEndNode[1]] = oldNoLongerEndNode;\r\n            this.setState({nodes:newGrid, currentEndNode:[newNode.row, newNode.col], previousEndNode: [newNode.row, newNode.col]});\r\n            this.clearBoard();\r\n            // console.log(\"end node instant animation \");\r\n            if (this.state.algorithm === \"Djikstra\" && this.state.alreadyVisualized) {\r\n                setTimeout(() => {\r\n                    // this.clearBoard();\r\n                    this.instantAnimationWithShortestPath();\r\n                }, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleMouseEnter(row,col) {\r\n        // console.log(\"MousePressed \" + this.state.mousePressed);\r\n        if (!this.state.mousePressed) return;\r\n        if (!this.state.addingWeight) {\r\n            const newGrid = this.makeNewGridWithWall(row, col);\r\n            this.setState({nodes:newGrid});\r\n        }\r\n        else {\r\n            const newGrid = this.makeNewGridWithWeight(row, col);\r\n            this.setState({nodes:newGrid});\r\n        }\r\n    }\r\n\r\n    makeNewGridWithWeight(row,col) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const currentNode = this.state.nodes[row][col];\r\n        if (!currentNode.isWall) {\r\n            const newNode = {\r\n                ...currentNode,\r\n                nodeWeight: 2\r\n            };\r\n            newGrid[row][col] = newNode;\r\n        }\r\n        return newGrid;\r\n    }\r\n\r\n    // This function is used to make 'walls' in the grid\r\n    makeNewGridWithWall(row,col) {\r\n        const newGrid = this.state.nodes.slice();\r\n        const currentNode = this.state.nodes[row][col];\r\n        const newNode = {\r\n            ...currentNode,\r\n            isWall: !currentNode['isWall']\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    }\r\n\r\n    // Determine if there is a path from start to end via BFS\r\n    visualizeBFS() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = BFS(nodes, startNode, endNode);\r\n        this.animate(visitedNode);\r\n    }\r\n\r\n    // Determine if there is a path from start to end via DFS\r\n    visualizeDFS() {\r\n        const {nodes, currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = DFS(nodes, startNode, endNode);\r\n        this.animate(visitedNode);\r\n    }\r\n\r\n    //This function will find the shortest path from start to end via Djikstra\r\n    visualizeDjikstra() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        const visitedNode = Dijkstra(nodes,startNode,endNode);\r\n        const beforeTimeStartInterval = this.animate(visitedNode) + 35;\r\n        this.setState({inAnimation: true});\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        console.log(nodes);\r\n        this.animateShortestPath(shortestPath,beforeTimeStartInterval,true);\r\n        const setTimeoutAgainFk = shortestPath.length + beforeTimeStartInterval;\r\n        setTimeout(() => {\r\n            this.setState({alreadyVisualized: true, inAnimation:false})\r\n        }, TIME_OUT_CONST * (setTimeoutAgainFk + 10))\r\n    }\r\n\r\n    // visitedNode(List) = All of the nodes that makes the shortest path from start to end\r\n    // beforeTimeStartInterval(Integer) = How many nodes are visited before we found our end node\r\n    // shouldSetTimeout(Boolean) = determines if we should be using instant animation or not.\r\n    animateShortestPath(visitedNode, beforeTimeStartInterval, shouldSetTimeout) {\r\n        const newGrid = this.state.nodes.slice();\r\n        // this.setState({inAnimation:true});\r\n        // console.log(\"Setting shortest path inAnimation to true\");\r\n        if (shouldSetTimeout) {\r\n            for (let i = 0; i < visitedNode.length; i++) {\r\n                const node = visitedNode[i];\r\n                const newNode = {\r\n                    ...node,\r\n                    isShortestPathNode: true,\r\n                };\r\n                setTimeout(() => {\r\n                    newGrid[node.row][node.col] = newNode;\r\n                    this.setState({nodes: newGrid});\r\n                }, TIME_OUT_CONST * (i + beforeTimeStartInterval));\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(visitedNode) {\r\n        this.setState({inAnimation:true});\r\n        // console.log(visitedNode.length);\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node.row === currentFinalNode[0] && node.col === currentFinalNode[1]) {\r\n                setTimeout(() => {\r\n                    this.setState({inAnimation:false});\r\n                }, (i+20)*TIME_OUT_CONST);\r\n                return i;\r\n            }\r\n            setTimeout(() => {\r\n                    const newGrid = this.state.nodes.slice();\r\n                    const newNode = {\r\n                        ...node,\r\n                        isAnimated: true,\r\n                    };\r\n                    // console.log(i);\r\n                    newGrid[node.row][node.col] = newNode;\r\n                    this.setState({nodes: newGrid})},\r\n                TIME_OUT_CONST*i);\r\n        }\r\n\r\n    }\r\n\r\n    instantAnimationWithShortestPath() {\r\n        const {nodes,initialAnimationFinished,currentStartNode, currentEndNode} = this.state;\r\n        const startNode = nodes[currentStartNode[0]][currentStartNode[1]];\r\n        const endNode = nodes[currentEndNode[0]][currentEndNode[1]];\r\n        // console.log(nodes);\r\n        // console.log(\"start node is \" + startNode.row + \",\" + startNode.col);\r\n        // console.log(\"end node is \" + endNode.row + \",\" + endNode.col);\r\n        const visitedNode = Dijkstra(nodes,startNode,endNode);\r\n        // console.log(\"Went through Djikstra\");\r\n        const newGrid = this.state.nodes.slice();\r\n        for (let i =0; i < visitedNode.length; i++) {\r\n            const node = visitedNode[i];\r\n            const currentFinalNode = this.state.currentEndNode;\r\n            if (node.row === currentFinalNode[0] && node.col === currentFinalNode[1]) {\r\n                break;\r\n            }\r\n            const newNode = {\r\n                ...node,\r\n                isAnimated: true,\r\n            };\r\n            newGrid[node.row][node.col] = newNode;\r\n        }\r\n        // console.log(\"Before shortest path\");\r\n        var shortestPath = constructShortestPath(nodes, startNode, endNode);\r\n        if (shortestPath === \"No path exist\") {\r\n            console.log(\"No path exist\");\r\n            return;\r\n        }\r\n        shortestPath = shortestPath.reverse();\r\n        for (let i = 0; i < shortestPath.length; i++) {\r\n            const node = shortestPath[i];\r\n            const newNode = {\r\n                ...node,\r\n                isShortestPathNode: true,\r\n            };\r\n            newGrid[newNode.row][newNode.col] = newNode;\r\n        };\r\n        this.setState({nodes:newGrid});\r\n    }\r\n\r\n    clearBoard(resetAlreadyVisualized) {\r\n        const {nodes,currentStartNode,currentEndNode, inAnimation} = this.state;\r\n        const newGrid = this.state.nodes.slice();\r\n        if (!inAnimation) {\r\n            for (var row = 0; row < nodes.length; row++) {\r\n                const column = nodes[row];\r\n                for (var col = 0; col < column.length; col++) {\r\n                    var currentNode = column[col];\r\n                    if (currentNode['isStart']) {\r\n                        // currentNode['isWall'] = false;\r\n                        currentNode['isAnimated'] = false;\r\n                        currentNode['isVisited'] = false;\r\n                        currentNode['isShortestPathNode'] = false;\r\n                        currentNode['distance'] = 0;\r\n                        newGrid[row][col] = currentNode\r\n                    } else {\r\n                        // currentNode['isWall'] = false;\r\n                        currentNode['isAnimated'] = false;\r\n                        currentNode['isVisited'] = false;\r\n                        currentNode['isShortestPathNode'] = false;\r\n                        currentNode['distance'] = \"infinity\";\r\n                        newGrid[row][col] = currentNode\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"After clearing board\");\r\n            // console.log(newGrid);\r\n            this.setState({nodes:newGrid});\r\n            if (resetAlreadyVisualized) {\r\n                this.setState({alreadyVisualized:false})\r\n            }\r\n        }\r\n    }\r\n\r\n    clearWall() {\r\n        const {nodes,inAnimation} = this.state;\r\n        if (!inAnimation) {\r\n            const newGrid = this.state.nodes.slice();\r\n            for (var row = 0; row < nodes.length; row++) {\r\n                const column = nodes[row];\r\n                for (var col = 0; col < column.length; col++) {\r\n                    var currentNode = column[col];\r\n                    currentNode['isWall'] = false;\r\n                }\r\n            }\r\n            this.setState({nodes: newGrid})\r\n        }\r\n    }\r\n\r\n\r\n    visualizeAlgorithm() {\r\n        const {algorithm} = this.state;\r\n        this.clearBoard();\r\n        if (algorithm === \"BFS\") {\r\n            this.visualizeBFS();\r\n        } else if (algorithm === \"DFS\") {\r\n            this.visualizeDFS();\r\n        } else if (algorithm === \"Djikstra\") {\r\n            this.visualizeDjikstra()\r\n            // this.instantAnimationWithShortestPath();\r\n        }\r\n    }\r\n\r\n    selectAlgorithm(event) {\r\n        this.setState({algorithm: event.target.value});\r\n        this.clearBoard();\r\n    }\r\n\r\n    render() {\r\n        const {nodes, mousePressed,algorithm, alreadyVisualized} = this.state;\r\n        return (\r\n            <div className =\"outerContainer\">\r\n                <Button className=\"button\" onClick={() => this.visualizeAlgorithm()}>\r\n                    Visualize {algorithm}\r\n                </Button>\r\n                <Button className=\"button\" onClick={() => this.clearBoard(true)}>\r\n                    Clear Board\r\n                </Button>\r\n                <Button className=\"button\" onClick={() => this.clearWall()}>\r\n                    Clear Wall\r\n                </Button>\r\n                <Button>\r\n                    <div className =\"dropdown\">\r\n                        <select className =\"AlgorithmSelect\" onChange={this.selectAlgorithm}>\r\n                            <option value=\"BFS\"> BFS</option>\r\n                            <option value=\"DFS\"> DFS</option>\r\n                            <option value=\"Djikstra\"> Djikstra </option>\r\n                        </select>\r\n                    </div>\r\n                </Button>\r\n                <ul className=\"iconList\">\r\n                    <li className=\"iconList\">\r\n                        <div className='box startNode'>\r\n                        </div>\r\n                        Start Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box endNode'>\r\n                        </div>\r\n                        End Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box'>\r\n                        </div>\r\n                        Unvisited Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box visitedNode'>\r\n                        </div>\r\n                        Visited Node\r\n                    </li>\r\n                    <li className=\"iconList\">\r\n                        <div className='box Wall'>\r\n                        </div>\r\n                        Wall\r\n                    </li>\r\n                </ul>\r\n                <div className=\"grid\">\r\n                {nodes.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx} className={`row-${rowIdx}`}>\r\n                            {row.map((node, nodeIdx) => {\r\n                                const {isStart, isFinish,isAnimated, row, col,isWall, isShortestPathNode,nodeWeight} = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        isStart = {isStart}\r\n                                        isFinish = {isFinish}\r\n                                        isAnimated = {isAnimated}\r\n                                        isWall = {isWall}\r\n                                        isShortestPathNode = {isShortestPathNode}\r\n                                        onMouseDown={(row,col) => this.handleMouseDown(row,col)}\r\n                                        onMouseEnter={(row,col) => this.handleMouseEnter(row,col)}\r\n                                        mousePressed ={mousePressed}\r\n                                        onMouseUp= {() => this.handleMouseUp(row,col)}\r\n                                        onMouseOver={ () => this.handleMouseOver(row,col)}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        instantAnimation = {alreadyVisualized}\r\n                                        nodeWeight = {nodeWeight}\r\n                                    >\r\n                                    </Node>\r\n                                );\r\n                            })}\r\n                    </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>);\r\n    }\r\n}","\r\nexport function BFS(grid, startNode, endNode) {\r\n    const {row,col} = startNode;\r\n    const endRow = endNode['row'];\r\n    const endCol = endNode['col'];\r\n    const queueOfVisited = [];\r\n    const visitedInOrder = [];\r\n    if (grid != null && startNode != null) {\r\n        queueOfVisited.push(startNode);\r\n    }\r\n    while (queueOfVisited.length > 0) {\r\n        const currentNode = queueOfVisited.shift();\r\n        const currentRow = currentNode['row'];\r\n        const currentCol = currentNode['col'];\r\n        visitedInOrder.push(currentNode);\r\n        currentNode['isVisited'] = true;\r\n        if (currentRow === endRow && currentCol === endCol) {\r\n            return visitedInOrder;\r\n        }\r\n        if (currentNode['isTop'] === false) {\r\n            const aboveNode = grid[currentRow-1][currentCol];\r\n            if (aboveNode['isVisited'] === false && !aboveNode['isWall']) {\r\n                queueOfVisited.push(aboveNode);\r\n                aboveNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isBottom'] === false) {\r\n            const belowNode = grid[currentRow+1][currentCol];\r\n            if (belowNode['isVisited'] === false && !belowNode['isWall']) {\r\n                queueOfVisited.push(belowNode);\r\n                belowNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isLeft'] === false) {\r\n            const leftNode = grid[currentRow][currentCol-1];\r\n            if (leftNode['isVisited'] === false && !leftNode['isWall']) {\r\n                queueOfVisited.push(leftNode);\r\n                leftNode['isVisited'] = true;\r\n            }\r\n        }\r\n        if (currentNode['isRight'] === false) {\r\n            const rightNode = grid[currentRow][currentCol+1];\r\n            if (rightNode['isVisited'] === false && !rightNode['isWall']) {\r\n                queueOfVisited.push(rightNode);\r\n                rightNode['isVisited'] = true;\r\n            }\r\n        }\r\n    }\r\n    return visitedInOrder;\r\n}\r\n\r\n","export function DFS(grid, startNode, endNode) {\n    const{row,col} = startNode;\n    const endRow = endNode['row'];\n    const endCol = endNode['col'];\n    var stack =[];\n    var returnVisitedStack = [];\n    if (grid != null && startNode != null) {\n        stack.push(startNode);\n    }\n    console.log(stack);\n    while (stack.length > 0) {\n        const currentNode = stack.pop();\n        returnVisitedStack.push(currentNode);\n        if (currentNode['isVisited'] === false) {\n            currentNode['isVisited'] = true;\n            const currentRow = currentNode['row'];\n            const currentCol = currentNode['col'];\n            if (currentRow === endRow && currentCol === endCol) {\n                return returnVisitedStack;\n            } else {\n                if (currentNode['isTop'] === false) {\n                    const topNode = grid[currentRow - 1][currentCol];\n                    if (topNode['isVisited'] === false && !topNode['isWall']) {\n                        stack.push(topNode);\n                    }\n                }\n                if (currentNode['isBottom'] === false) {\n                    const bottomNode = grid[currentRow + 1][currentCol];\n                    if (bottomNode['isVisited'] === false && !bottomNode['isWall']) {\n                        stack.push(bottomNode);\n                    }\n                }\n                if (currentNode['isLeft'] === false) {\n                    const leftNode = grid[currentRow][currentCol - 1];\n                    if (leftNode['isVisited'] === false && !leftNode['isWall']) {\n                        stack.push(leftNode);\n                    }\n                }\n                if (currentNode['isRight'] === false) {\n                    const rightNode = grid[currentRow][currentCol + 1];\n                    if (rightNode['isVisited'] === false && !rightNode['isWall']) {\n                        stack.push(rightNode);\n                    }\n                }\n            }\n        }\n    }\n    return returnVisitedStack;\n}","import React from 'react';\nimport './App.css';\nimport Path from './PathFindingVisualizer/Path';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Path></Path>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}